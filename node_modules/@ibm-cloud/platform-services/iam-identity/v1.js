"use strict";
/**
 * (C) Copyright IBM Corp. 2023.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * IBM OpenAPI SDK Code Generator Version: 3.80.0-29334a73-20230925-151553
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * API Version: 1.0.0
 */
var IamIdentityV1 = /** @class */ (function (_super) {
    __extends(IamIdentityV1, _super);
    /**
     * Construct a IamIdentityV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {IamIdentityV1}
     */
    function IamIdentityV1(options) {
        var _this = this;
        options = options || {};
        _this = _super.call(this, options) || this;
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        else {
            _this.setServiceUrl(IamIdentityV1.DEFAULT_SERVICE_URL);
        }
        return _this;
    }
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of IamIdentityV1 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {IamIdentityV1}
     */
    IamIdentityV1.newInstance = function (options) {
        options = options || {};
        if (!options.serviceName) {
            options.serviceName = this.DEFAULT_SERVICE_NAME;
        }
        if (!options.authenticator) {
            options.authenticator = (0, ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment)(options.serviceName);
        }
        var service = new IamIdentityV1(options);
        service.configureService(options.serviceName);
        if (options.serviceUrl) {
            service.setServiceUrl(options.serviceUrl);
        }
        return service;
    };
    /*************************
     * aPIKeyOperations
     ************************/
    /**
     * Get API keys for a given service or user IAM ID and account ID.
     *
     * Returns the list of API key details for a given service or user IAM ID and account ID. Users can manage user API
     * keys for themself, or service ID API keys for service IDs that are bound to an entity they have access to. In case
     * of service IDs and their API keys, a user must be either an account owner, a IBM Cloud org manager or IBM Cloud
     * space developer in order to manage service IDs of the entity.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.accountId] - Account ID of the API keys to query. If a service IAM ID is specified in
     * iam_id then account_id must match the account of the IAM ID. If a user IAM ID is specified in iam_id then then
     * account_id must match the account of the Authorization token.
     * @param {string} [params.iamId] - IAM ID of the API keys to be queried. The IAM ID may be that of a user or a
     * service. For a user IAM ID iam_id must match the Authorization token.
     * @param {number} [params.pagesize] - Optional size of a single page. Default is 20 items per page. Valid range is 1
     * to 100.
     * @param {string} [params.pagetoken] - Optional Prev or Next page token returned from a previous query execution.
     * Default is start with first page.
     * @param {string} [params.scope] - Optional parameter to define the scope of the queried API keys. Can be 'entity'
     * (default) or 'account'.
     * @param {string} [params.type] - Optional parameter to filter the type of the queried API keys. Can be 'user' or
     * 'serviceid'.
     * @param {string} [params.sort] - Optional sort property, valid values are name, description, created_at and
     * created_by. If specified, the items are sorted by the value of this property.
     * @param {string} [params.order] - Optional sort order, valid values are asc and desc. Default: asc.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ApiKeyList>>}
     */
    IamIdentityV1.prototype.listApiKeys = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = [];
        var _validParams = [
            'accountId',
            'iamId',
            'pagesize',
            'pagetoken',
            'scope',
            'type',
            'sort',
            'order',
            'includeHistory',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'account_id': _params.accountId,
            'iam_id': _params.iamId,
            'pagesize': _params.pagesize,
            'pagetoken': _params.pagetoken,
            'scope': _params.scope,
            'type': _params.type,
            'sort': _params.sort,
            'order': _params.order,
            'include_history': _params.includeHistory,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'listApiKeys');
        var parameters = {
            options: {
                url: '/v1/apikeys',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create an API key.
     *
     * Creates an API key for a UserID or service ID. Users can manage user API keys for themself, or service ID API keys
     * for service IDs that are bound to an entity they have access to.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.name - Name of the API key. The name is not checked for uniqueness. Therefore multiple names
     * with the same value can exist. Access is done via the UUID of the API key.
     * @param {string} params.iamId - The iam_id that this API key authenticates.
     * @param {string} [params.description] - The optional description of the API key. The 'description' property is only
     * available if a description was provided during a create of an API key.
     * @param {string} [params.accountId] - The account ID of the API key.
     * @param {string} [params.apikey] - You can optionally passthrough the API key value for this API key. If passed, NO
     * validation of that apiKey value is done, i.e. the value can be non-URL safe. If omitted, the API key management
     * will create an URL safe opaque API key value. The value of the API key is checked for uniqueness. Ensure enough
     * variations when passing in this value.
     * @param {boolean} [params.storeValue] - Send true or false to set whether the API key value is retrievable in the
     * future by using the Get details of an API key request. If you create an API key for a user, you must specify
     * `false` or omit the value. We don't allow storing of API keys for users.
     * @param {string} [params.entityLock] - Indicates if the API key is locked for further write operations. False by
     * default.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ApiKey>>}
     */
    IamIdentityV1.prototype.createApiKey = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['name', 'iamId'];
        var _validParams = [
            'name',
            'iamId',
            'description',
            'accountId',
            'apikey',
            'storeValue',
            'entityLock',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'name': _params.name,
            'iam_id': _params.iamId,
            'description': _params.description,
            'account_id': _params.accountId,
            'apikey': _params.apikey,
            'store_value': _params.storeValue,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'createApiKey');
        var parameters = {
            options: {
                url: '/v1/apikeys',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Entity-Lock': _params.entityLock,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get details of an API key by its value.
     *
     * Returns the details of an API key by its value. Users can manage user API keys for themself, or service ID API keys
     * for service IDs that are bound to an entity they have access to.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.iamApiKey] - API key value.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ApiKey>>}
     */
    IamIdentityV1.prototype.getApiKeysDetails = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = [];
        var _validParams = ['iamApiKey', 'includeHistory', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'include_history': _params.includeHistory,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'getApiKeysDetails');
        var parameters = {
            options: {
                url: '/v1/apikeys/details',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'IAM-ApiKey': _params.iamApiKey,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get details of an API key.
     *
     * Returns the details of an API key. Users can manage user API keys for themself, or service ID API keys for service
     * IDs that are bound to an entity they have access to. In case of service IDs and their API keys, a user must be
     * either an account owner, a IBM Cloud org manager or IBM Cloud space developer in order to manage service IDs of the
     * entity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the API key.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {boolean} [params.includeActivity] - Defines if the entity's activity is included in the response.
     * Retrieving activity data is an expensive operation, so only request this when needed.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ApiKey>>}
     */
    IamIdentityV1.prototype.getApiKey = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['id'];
        var _validParams = ['id', 'includeHistory', 'includeActivity', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'include_history': _params.includeHistory,
            'include_activity': _params.includeActivity,
        };
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'getApiKey');
        var parameters = {
            options: {
                url: '/v1/apikeys/{id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Updates an API key.
     *
     * Updates properties of an API key. This does NOT affect existing access tokens. Their token content will stay
     * unchanged until the access token is refreshed. To update an API key, pass the property to be modified. To delete
     * one property's value, pass the property with an empty value "".Users can manage user API keys for themself, or
     * service ID API keys for service IDs that are bound to an entity they have access to.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the API key to be updated.
     * @param {string} params.ifMatch - Version of the API key to be updated. Specify the version that you retrieved when
     * reading the API key. This value helps identifying parallel usage of this API. Pass * to indicate to update any
     * version available. This might result in stale updates.
     * @param {string} [params.name] - The name of the API key to update. If specified in the request the parameter must
     * not be empty. The name is not checked for uniqueness. Failure to this will result in an Error condition.
     * @param {string} [params.description] - The description of the API key to update. If specified an empty description
     * will clear the description of the API key. If a non empty value is provided the API key will be updated.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ApiKey>>}
     */
    IamIdentityV1.prototype.updateApiKey = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['id', 'ifMatch'];
        var _validParams = ['id', 'ifMatch', 'name', 'description', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'name': _params.name,
            'description': _params.description,
        };
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'updateApiKey');
        var parameters = {
            options: {
                url: '/v1/apikeys/{id}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Deletes an API key.
     *
     * Deletes an API key. Existing tokens will remain valid until expired. Users can manage user API keys for themself,
     * or service ID API keys for service IDs that are bound to an entity they have access to.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the API key.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    IamIdentityV1.prototype.deleteApiKey = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['id'];
        var _validParams = ['id', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteApiKey');
        var parameters = {
            options: {
                url: '/v1/apikeys/{id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Lock the API key.
     *
     * Locks an API key by ID. Users can manage user API keys for themself, or service ID API keys for service IDs that
     * are bound to an entity they have access to. In case of service IDs and their API keys, a user must be either an
     * account owner, a IBM Cloud org manager or IBM Cloud space developer in order to manage service IDs of the entity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the API key.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    IamIdentityV1.prototype.lockApiKey = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['id'];
        var _validParams = ['id', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'lockApiKey');
        var parameters = {
            options: {
                url: '/v1/apikeys/{id}/lock',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Unlock the API key.
     *
     * Unlocks an API key by ID. Users can manage user API keys for themself, or service ID API keys for service IDs that
     * are bound to an entity they have access to. In case of service IDs and their API keys, a user must be either an
     * account owner, a IBM Cloud org manager or IBM Cloud space developer in order to manage service IDs of the entity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the API key.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    IamIdentityV1.prototype.unlockApiKey = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['id'];
        var _validParams = ['id', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'unlockApiKey');
        var parameters = {
            options: {
                url: '/v1/apikeys/{id}/lock',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * serviceIDOperations
     ************************/
    /**
     * List service IDs.
     *
     * Returns a list of service IDs. Users can manage user API keys for themself, or service ID API keys for service IDs
     * that are bound to an entity they have access to. Note: apikey details are only included in the response when
     * creating a Service ID with an api key.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.accountId] - Account ID of the service ID(s) to query. This parameter is required (unless
     * using a pagetoken).
     * @param {string} [params.name] - Name of the service ID(s) to query. Optional.20 items per page. Valid range is 1 to
     * 100.
     * @param {number} [params.pagesize] - Optional size of a single page. Default is 20 items per page. Valid range is 1
     * to 100.
     * @param {string} [params.pagetoken] - Optional Prev or Next page token returned from a previous query execution.
     * Default is start with first page.
     * @param {string} [params.sort] - Optional sort property, valid values are name, description, created_at and
     * modified_at. If specified, the items are sorted by the value of this property.
     * @param {string} [params.order] - Optional sort order, valid values are asc and desc. Default: asc.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ServiceIdList>>}
     */
    IamIdentityV1.prototype.listServiceIds = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = [];
        var _validParams = [
            'accountId',
            'name',
            'pagesize',
            'pagetoken',
            'sort',
            'order',
            'includeHistory',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'account_id': _params.accountId,
            'name': _params.name,
            'pagesize': _params.pagesize,
            'pagetoken': _params.pagetoken,
            'sort': _params.sort,
            'order': _params.order,
            'include_history': _params.includeHistory,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'listServiceIds');
        var parameters = {
            options: {
                url: '/v1/serviceids/',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create a service ID.
     *
     * Creates a service ID for an IBM Cloud account. Users can manage user API keys for themself, or service ID API keys
     * for service IDs that are bound to an entity they have access to.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - ID of the account the service ID belongs to.
     * @param {string} params.name - Name of the Service Id. The name is not checked for uniqueness. Therefore multiple
     * names with the same value can exist. Access is done via the UUID of the Service Id.
     * @param {string} [params.description] - The optional description of the Service Id. The 'description' property is
     * only available if a description was provided during a create of a Service Id.
     * @param {string[]} [params.uniqueInstanceCrns] - Optional list of CRNs (string array) which point to the services
     * connected to the service ID.
     * @param {ApiKeyInsideCreateServiceIdRequest} [params.apikey] - Parameters for the API key in the Create service Id
     * V1 REST request.
     * @param {string} [params.entityLock] - Indicates if the service ID is locked for further write operations. False by
     * default.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ServiceId>>}
     */
    IamIdentityV1.prototype.createServiceId = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['accountId', 'name'];
        var _validParams = [
            'accountId',
            'name',
            'description',
            'uniqueInstanceCrns',
            'apikey',
            'entityLock',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'account_id': _params.accountId,
            'name': _params.name,
            'description': _params.description,
            'unique_instance_crns': _params.uniqueInstanceCrns,
            'apikey': _params.apikey,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'createServiceId');
        var parameters = {
            options: {
                url: '/v1/serviceids/',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Entity-Lock': _params.entityLock,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get details of a service ID.
     *
     * Returns the details of a service ID. Users can manage user API keys for themself, or service ID API keys for
     * service IDs that are bound to an entity they have access to. Note: apikey details are only included in the response
     * when creating a Service ID with an api key.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the service ID.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {boolean} [params.includeActivity] - Defines if the entity's activity is included in the response.
     * Retrieving activity data is an expensive operation, so only request this when needed.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ServiceId>>}
     */
    IamIdentityV1.prototype.getServiceId = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['id'];
        var _validParams = ['id', 'includeHistory', 'includeActivity', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'include_history': _params.includeHistory,
            'include_activity': _params.includeActivity,
        };
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'getServiceId');
        var parameters = {
            options: {
                url: '/v1/serviceids/{id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update service ID.
     *
     * Updates properties of a service ID. This does NOT affect existing access tokens. Their token content will stay
     * unchanged until the access token is refreshed. To update a service ID, pass the property to be modified. To delete
     * one property's value, pass the property with an empty value "".Users can manage user API keys for themself, or
     * service ID API keys for service IDs that are bound to an entity they have access to. Note: apikey details are only
     * included in the response when creating a Service ID with an apikey.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the service ID to be updated.
     * @param {string} params.ifMatch - Version of the service ID to be updated. Specify the version that you retrieved as
     * entity_tag (ETag header) when reading the service ID. This value helps identifying parallel usage of this API. Pass
     * * to indicate to update any version available. This might result in stale updates.
     * @param {string} [params.name] - The name of the service ID to update. If specified in the request the parameter
     * must not be empty. The name is not checked for uniqueness. Failure to this will result in an Error condition.
     * @param {string} [params.description] - The description of the service ID to update. If specified an empty
     * description will clear the description of the service ID. If an non empty value is provided the service ID will be
     * updated.
     * @param {string[]} [params.uniqueInstanceCrns] - List of CRNs which point to the services connected to this service
     * ID. If specified an empty list will clear all existing unique instance crns of the service ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ServiceId>>}
     */
    IamIdentityV1.prototype.updateServiceId = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['id', 'ifMatch'];
        var _validParams = ['id', 'ifMatch', 'name', 'description', 'uniqueInstanceCrns', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'name': _params.name,
            'description': _params.description,
            'unique_instance_crns': _params.uniqueInstanceCrns,
        };
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'updateServiceId');
        var parameters = {
            options: {
                url: '/v1/serviceids/{id}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Deletes a service ID and associated API keys.
     *
     * Deletes a service ID and all API keys associated to it. Before deleting the service ID, all associated API keys are
     * deleted. In case a Delete Conflict (status code 409) a retry of the request may help as the service ID is only
     * deleted if the associated API keys were successfully deleted before. Users can manage user API keys for themself,
     * or service ID API keys for service IDs that are bound to an entity they have access to.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the service ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    IamIdentityV1.prototype.deleteServiceId = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['id'];
        var _validParams = ['id', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteServiceId');
        var parameters = {
            options: {
                url: '/v1/serviceids/{id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Lock the service ID.
     *
     * Locks a service ID by ID. Users can manage user API keys for themself, or service ID API keys for service IDs that
     * are bound to an entity they have access to. In case of service IDs and their API keys, a user must be either an
     * account owner, a IBM Cloud org manager or IBM Cloud space developer in order to manage service IDs of the entity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the service ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    IamIdentityV1.prototype.lockServiceId = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['id'];
        var _validParams = ['id', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'lockServiceId');
        var parameters = {
            options: {
                url: '/v1/serviceids/{id}/lock',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Unlock the service ID.
     *
     * Unlocks a service ID by ID. Users can manage user API keys for themself, or service ID API keys for service IDs
     * that are bound to an entity they have access to. In case of service IDs and their API keys, a user must be either
     * an account owner, a IBM Cloud org manager or IBM Cloud space developer in order to manage service IDs of the
     * entity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the service ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    IamIdentityV1.prototype.unlockServiceId = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['id'];
        var _validParams = ['id', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'unlockServiceId');
        var parameters = {
            options: {
                url: '/v1/serviceids/{id}/lock',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * trustedProfilesOperations
     ************************/
    /**
     * Create a trusted profile.
     *
     * Create a trusted profile for a given account ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.name - Name of the trusted profile. The name is checked for uniqueness. Therefore trusted
     * profiles with the same names can not exist in the same account.
     * @param {string} params.accountId - The account ID of the trusted profile.
     * @param {string} [params.description] - The optional description of the trusted profile. The 'description' property
     * is only available if a description was provided during creation of trusted profile.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfile>>}
     */
    IamIdentityV1.prototype.createProfile = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['name', 'accountId'];
        var _validParams = ['name', 'accountId', 'description', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'name': _params.name,
            'account_id': _params.accountId,
            'description': _params.description,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'createProfile');
        var parameters = {
            options: {
                url: '/v1/profiles',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List trusted profiles.
     *
     * List the trusted profiles in an account. The `account_id` query parameter determines the account from which to
     * retrieve the list of trusted profiles.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - Account ID to query for trusted profiles.
     * @param {string} [params.name] - Name of the trusted profile to query.
     * @param {number} [params.pagesize] - Optional size of a single page. Default is 20 items per page. Valid range is 1
     * to 100.
     * @param {string} [params.sort] - Optional sort property, valid values are name, description, created_at and
     * modified_at. If specified, the items are sorted by the value of this property.
     * @param {string} [params.order] - Optional sort order, valid values are asc and desc. Default: asc.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {string} [params.pagetoken] - Optional Prev or Next page token returned from a previous query execution.
     * Default is start with first page.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfilesList>>}
     */
    IamIdentityV1.prototype.listProfiles = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['accountId'];
        var _validParams = [
            'accountId',
            'name',
            'pagesize',
            'sort',
            'order',
            'includeHistory',
            'pagetoken',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'account_id': _params.accountId,
            'name': _params.name,
            'pagesize': _params.pagesize,
            'sort': _params.sort,
            'order': _params.order,
            'include_history': _params.includeHistory,
            'pagetoken': _params.pagetoken,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'listProfiles');
        var parameters = {
            options: {
                url: '/v1/profiles',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get a trusted profile.
     *
     * Retrieve a trusted profile by its `profile-id`. Only the trusted profile's data is returned (`name`, `description`,
     * `iam_id`, etc.), not the federated users or compute resources that qualify to apply the trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile to get.
     * @param {boolean} [params.includeActivity] - Defines if the entity's activity is included in the response.
     * Retrieving activity data is an expensive operation, so only request this when needed.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfile>>}
     */
    IamIdentityV1.prototype.getProfile = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['profileId'];
        var _validParams = ['profileId', 'includeActivity', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'include_activity': _params.includeActivity,
        };
        var path = {
            'profile-id': _params.profileId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'getProfile');
        var parameters = {
            options: {
                url: '/v1/profiles/{profile-id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update a trusted profile.
     *
     * Update the name or description of an existing trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile to be updated.
     * @param {string} params.ifMatch - Version of the trusted profile to be updated. Specify the version that you
     * retrived when reading list of trusted profiles. This value helps to identify any parallel usage of trusted profile.
     * Pass * to indicate to update any version available. This might result in stale updates.
     * @param {string} [params.name] - The name of the trusted profile to update. If specified in the request the
     * parameter must not be empty. The name is checked for uniqueness. Failure to this will result in an Error condition.
     * @param {string} [params.description] - The description of the trusted profile to update. If specified an empty
     * description will clear the description of the trusted profile. If a non empty value is provided the trusted profile
     * will be updated.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfile>>}
     */
    IamIdentityV1.prototype.updateProfile = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['profileId', 'ifMatch'];
        var _validParams = ['profileId', 'ifMatch', 'name', 'description', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'name': _params.name,
            'description': _params.description,
        };
        var path = {
            'profile-id': _params.profileId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'updateProfile');
        var parameters = {
            options: {
                url: '/v1/profiles/{profile-id}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a trusted profile.
     *
     * Delete a trusted profile. When you delete trusted profile, compute resources and federated users are unlinked from
     * the profile and can no longer apply the trusted profile identity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    IamIdentityV1.prototype.deleteProfile = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['profileId'];
        var _validParams = ['profileId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'profile-id': _params.profileId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteProfile');
        var parameters = {
            options: {
                url: '/v1/profiles/{profile-id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create claim rule for a trusted profile.
     *
     * Create a claim rule for a trusted profile. There is a limit of 20 rules per trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile to create a claim rule.
     * @param {string} params.type - Type of the claim rule, either 'Profile-SAML' or 'Profile-CR'.
     * @param {ProfileClaimRuleConditions[]} params.conditions - Conditions of this claim rule.
     * @param {ResponseContext} [params.context] - Context with key properties for problem determination.
     * @param {string} [params.name] - Name of the claim rule to be created or updated.
     * @param {string} [params.realmName] - The realm name of the Idp this claim rule applies to. This field is required
     * only if the type is specified as 'Profile-SAML'.
     * @param {string} [params.crType] - The compute resource type the rule applies to, required only if type is specified
     * as 'Profile-CR'. Valid values are VSI, IKS_SA, ROKS_SA.
     * @param {number} [params.expiration] - Session expiration in seconds, only required if type is 'Profile-SAML'.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ProfileClaimRule>>}
     */
    IamIdentityV1.prototype.createClaimRule = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['profileId', 'type', 'conditions'];
        var _validParams = [
            'profileId',
            'type',
            'conditions',
            'context',
            'name',
            'realmName',
            'crType',
            'expiration',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'type': _params.type,
            'conditions': _params.conditions,
            'context': _params.context,
            'name': _params.name,
            'realm_name': _params.realmName,
            'cr_type': _params.crType,
            'expiration': _params.expiration,
        };
        var path = {
            'profile-id': _params.profileId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'createClaimRule');
        var parameters = {
            options: {
                url: '/v1/profiles/{profile-id}/rules',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List claim rules for a trusted profile.
     *
     * Get a list of all claim rules for a trusted profile. The `profile-id` query parameter determines the profile from
     * which to retrieve the list of claim rules.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ProfileClaimRuleList>>}
     */
    IamIdentityV1.prototype.listClaimRules = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['profileId'];
        var _validParams = ['profileId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'profile-id': _params.profileId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'listClaimRules');
        var parameters = {
            options: {
                url: '/v1/profiles/{profile-id}/rules',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get a claim rule for a trusted profile.
     *
     * A specific claim rule can be fetched for a given trusted profile ID and rule ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {string} params.ruleId - ID of the claim rule to get.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ProfileClaimRule>>}
     */
    IamIdentityV1.prototype.getClaimRule = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['profileId', 'ruleId'];
        var _validParams = ['profileId', 'ruleId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'profile-id': _params.profileId,
            'rule-id': _params.ruleId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'getClaimRule');
        var parameters = {
            options: {
                url: '/v1/profiles/{profile-id}/rules/{rule-id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update claim rule for a trusted profile.
     *
     * Update a specific claim rule for a given trusted profile ID and rule ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {string} params.ruleId - ID of the claim rule to update.
     * @param {string} params.ifMatch - Version of the claim rule to be updated. Specify the version that you retrived
     * when reading list of claim rules. This value helps to identify any parallel usage of claim rule. Pass * to indicate
     * to update any version available. This might result in stale updates.
     * @param {string} params.type - Type of the claim rule, either 'Profile-SAML' or 'Profile-CR'.
     * @param {ProfileClaimRuleConditions[]} params.conditions - Conditions of this claim rule.
     * @param {ResponseContext} [params.context] - Context with key properties for problem determination.
     * @param {string} [params.name] - Name of the claim rule to be created or updated.
     * @param {string} [params.realmName] - The realm name of the Idp this claim rule applies to. This field is required
     * only if the type is specified as 'Profile-SAML'.
     * @param {string} [params.crType] - The compute resource type the rule applies to, required only if type is specified
     * as 'Profile-CR'. Valid values are VSI, IKS_SA, ROKS_SA.
     * @param {number} [params.expiration] - Session expiration in seconds, only required if type is 'Profile-SAML'.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ProfileClaimRule>>}
     */
    IamIdentityV1.prototype.updateClaimRule = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['profileId', 'ruleId', 'ifMatch', 'type', 'conditions'];
        var _validParams = [
            'profileId',
            'ruleId',
            'ifMatch',
            'type',
            'conditions',
            'context',
            'name',
            'realmName',
            'crType',
            'expiration',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'type': _params.type,
            'conditions': _params.conditions,
            'context': _params.context,
            'name': _params.name,
            'realm_name': _params.realmName,
            'cr_type': _params.crType,
            'expiration': _params.expiration,
        };
        var path = {
            'profile-id': _params.profileId,
            'rule-id': _params.ruleId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'updateClaimRule');
        var parameters = {
            options: {
                url: '/v1/profiles/{profile-id}/rules/{rule-id}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a claim rule.
     *
     * Delete a claim rule. When you delete a claim rule, federated user or compute resources are no longer required to
     * meet the conditions of the claim rule in order to apply the trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {string} params.ruleId - ID of the claim rule to delete.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    IamIdentityV1.prototype.deleteClaimRule = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['profileId', 'ruleId'];
        var _validParams = ['profileId', 'ruleId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'profile-id': _params.profileId,
            'rule-id': _params.ruleId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteClaimRule');
        var parameters = {
            options: {
                url: '/v1/profiles/{profile-id}/rules/{rule-id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create link to a trusted profile.
     *
     * Create a direct link between a specific compute resource and a trusted profile, rather than creating conditions
     * that a compute resource must fulfill to apply a trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {string} params.crType - The compute resource type. Valid values are VSI, IKS_SA, ROKS_SA.
     * @param {CreateProfileLinkRequestLink} params.link - Link details.
     * @param {string} [params.name] - Optional name of the Link.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ProfileLink>>}
     */
    IamIdentityV1.prototype.createLink = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['profileId', 'crType', 'link'];
        var _validParams = ['profileId', 'crType', 'link', 'name', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'cr_type': _params.crType,
            'link': _params.link,
            'name': _params.name,
        };
        var path = {
            'profile-id': _params.profileId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'createLink');
        var parameters = {
            options: {
                url: '/v1/profiles/{profile-id}/links',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List links to a trusted profile.
     *
     * Get a list of links to a trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ProfileLinkList>>}
     */
    IamIdentityV1.prototype.listLinks = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['profileId'];
        var _validParams = ['profileId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'profile-id': _params.profileId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'listLinks');
        var parameters = {
            options: {
                url: '/v1/profiles/{profile-id}/links',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get link to a trusted profile.
     *
     * Get a specific link to a trusted profile by `link_id`.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {string} params.linkId - ID of the link.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ProfileLink>>}
     */
    IamIdentityV1.prototype.getLink = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['profileId', 'linkId'];
        var _validParams = ['profileId', 'linkId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'profile-id': _params.profileId,
            'link-id': _params.linkId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'getLink');
        var parameters = {
            options: {
                url: '/v1/profiles/{profile-id}/links/{link-id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete link to a trusted profile.
     *
     * Delete a link between a compute resource and a trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {string} params.linkId - ID of the link.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    IamIdentityV1.prototype.deleteLink = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['profileId', 'linkId'];
        var _validParams = ['profileId', 'linkId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'profile-id': _params.profileId,
            'link-id': _params.linkId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteLink');
        var parameters = {
            options: {
                url: '/v1/profiles/{profile-id}/links/{link-id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get a list of identities that can assume the trusted profile.
     *
     * Get a list of identities that can assume the trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ProfileIdentitiesResponse>>}
     */
    IamIdentityV1.prototype.getProfileIdentities = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['profileId'];
        var _validParams = ['profileId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'profile-id': _params.profileId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'getProfileIdentities');
        var parameters = {
            options: {
                url: '/v1/profiles/{profile-id}/identities',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update the list of identities that can assume the trusted profile.
     *
     * Update the list of identities that can assume the trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {string} params.ifMatch - Entity tag of the Identities to be updated. Specify the tag that you retrieved
     * when reading the Profile Identities. This value helps identify parallel usage of this API. Pass * to indicate
     * updating any available version, which may result in stale updates.
     * @param {ProfileIdentityRequest[]} [params.identities] - List of identities that can assume the trusted profile.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ProfileIdentitiesResponse>>}
     */
    IamIdentityV1.prototype.setProfileIdentities = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['profileId', 'ifMatch'];
        var _validParams = ['profileId', 'ifMatch', 'identities', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'identities': _params.identities,
        };
        var path = {
            'profile-id': _params.profileId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'setProfileIdentities');
        var parameters = {
            options: {
                url: '/v1/profiles/{profile-id}/identities',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Add a specific identity that can assume the trusted profile.
     *
     * Add a specific identity that can assume the trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {string} params.identityType - Type of the identity.
     * @param {string} params.identifier - Identifier of the identity that can assume the trusted profiles. This can be a
     * user identifier (IAM id), serviceid or crn. Internally it uses account id of the service id for the identifier
     * 'serviceid' and for the identifier 'crn' it uses account id contained in the CRN.
     * @param {string} params.type - Type of the identity.
     * @param {string[]} [params.accounts] - Only valid for the type user. Accounts from which a user can assume the
     * trusted profile.
     * @param {string} [params.description] - Description of the identity that can assume the trusted profile. This is
     * optional field for all the types of identities. When this field is not set for the identity type 'serviceid' then
     * the description of the service id is used. Description is recommended for the identity type 'crn' E.g. 'Instance
     * 1234 of IBM Cloud Service project'.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ProfileIdentityResponse>>}
     */
    IamIdentityV1.prototype.setProfileIdentity = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['profileId', 'identityType', 'identifier', 'type'];
        var _validParams = [
            'profileId',
            'identityType',
            'identifier',
            'type',
            'accounts',
            'description',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'identifier': _params.identifier,
            'type': _params.type,
            'accounts': _params.accounts,
            'description': _params.description,
        };
        var path = {
            'profile-id': _params.profileId,
            'identity-type': _params.identityType,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'setProfileIdentity');
        var parameters = {
            options: {
                url: '/v1/profiles/{profile-id}/identities/{identity-type}',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get the identity that can assume the trusted profile.
     *
     * Get the identity that can assume the trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {string} params.identityType - Type of the identity.
     * @param {string} params.identifierId - Identifier of the identity that can assume the trusted profiles.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ProfileIdentityResponse>>}
     */
    IamIdentityV1.prototype.getProfileIdentity = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['profileId', 'identityType', 'identifierId'];
        var _validParams = ['profileId', 'identityType', 'identifierId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'profile-id': _params.profileId,
            'identity-type': _params.identityType,
            'identifier-id': _params.identifierId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'getProfileIdentity');
        var parameters = {
            options: {
                url: '/v1/profiles/{profile-id}/identities/{identity-type}/{identifier-id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete the identity that can assume the trusted profile.
     *
     * Delete the identity that can assume the trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {string} params.identityType - Type of the identity.
     * @param {string} params.identifierId - Identifier of the identity that can assume the trusted profiles.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    IamIdentityV1.prototype.deleteProfileIdentity = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['profileId', 'identityType', 'identifierId'];
        var _validParams = ['profileId', 'identityType', 'identifierId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'profile-id': _params.profileId,
            'identity-type': _params.identityType,
            'identifier-id': _params.identifierId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteProfileIdentity');
        var parameters = {
            options: {
                url: '/v1/profiles/{profile-id}/identities/{identity-type}/{identifier-id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * accountSettings
     ************************/
    /**
     * Get account configurations.
     *
     * Returns the details of an account's configuration.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - Unique ID of the account.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.AccountSettingsResponse>>}
     */
    IamIdentityV1.prototype.getAccountSettings = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['accountId'];
        var _validParams = ['accountId', 'includeHistory', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'include_history': _params.includeHistory,
        };
        var path = {
            'account_id': _params.accountId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'getAccountSettings');
        var parameters = {
            options: {
                url: '/v1/accounts/{account_id}/settings/identity',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update account configurations.
     *
     * Allows a user to configure settings on their account with regards to MFA, MFA excemption list, session lifetimes,
     * access control for creating new identities, and enforcing IP restrictions on token creation.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.ifMatch - Version of the account settings to be updated. Specify the version that you
     * retrieved as entity_tag (ETag header) when reading the account. This value helps identifying parallel usage of this
     * API. Pass * to indicate to update any version available. This might result in stale updates.
     * @param {string} params.accountId - The id of the account to update the settings for.
     * @param {string} [params.restrictCreateServiceId] - Defines whether or not creating a service ID is access
     * controlled. Valid values:
     *   * RESTRICTED - only users assigned the 'Service ID creator' role on the IAM Identity Service can create service
     * IDs, including the account owner
     *   * NOT_RESTRICTED - all members of an account can create service IDs
     *   * NOT_SET - to 'unset' a previous set value.
     * @param {string} [params.restrictCreatePlatformApikey] - Defines whether or not creating platform API keys is access
     * controlled. Valid values:
     *   * RESTRICTED - only users assigned the 'User API key creator' role on the IAM Identity Service can create API
     * keys, including the account owner
     *   * NOT_RESTRICTED - all members of an account can create platform API keys
     *   * NOT_SET - to 'unset' a previous set value.
     * @param {string} [params.allowedIpAddresses] - Defines the IP addresses and subnets from which IAM tokens can be
     * created for the account.
     * @param {string} [params.mfa] - Defines the MFA trait for the account. Valid values:
     *   * NONE - No MFA trait set
     *   * NONE_NO_ROPC- No MFA, disable CLI logins with only a password
     *   * TOTP - For all non-federated IBMId users
     *   * TOTP4ALL - For all users
     *   * LEVEL1 - Email-based MFA for all users
     *   * LEVEL2 - TOTP-based MFA for all users
     *   * LEVEL3 - U2F MFA for all users.
     * @param {AccountSettingsUserMFA[]} [params.userMfa] - List of users that are exempted from the MFA requirement of
     * the account.
     * @param {string} [params.sessionExpirationInSeconds] - Defines the session expiration in seconds for the account.
     * Valid values:
     *   * Any whole number between between '900' and '86400'
     *   * NOT_SET - To unset account setting and use service default.
     * @param {string} [params.sessionInvalidationInSeconds] - Defines the period of time in seconds in which a session
     * will be invalidated due to inactivity. Valid values:
     *   * Any whole number between '900' and '7200'
     *   * NOT_SET - To unset account setting and use service default.
     * @param {string} [params.maxSessionsPerIdentity] - Defines the max allowed sessions per identity required by the
     * account. Value values:
     *   * Any whole number greater than 0
     *   * NOT_SET - To unset account setting and use service default.
     * @param {string} [params.systemAccessTokenExpirationInSeconds] - Defines the access token expiration in seconds.
     * Valid values:
     *   * Any whole number between '900' and '3600'
     *   * NOT_SET - To unset account setting and use service default.
     * @param {string} [params.systemRefreshTokenExpirationInSeconds] - Defines the refresh token expiration in seconds.
     * Valid values:
     *   * Any whole number between '900' and '259200'
     *   * NOT_SET - To unset account setting and use service default.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.AccountSettingsResponse>>}
     */
    IamIdentityV1.prototype.updateAccountSettings = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['ifMatch', 'accountId'];
        var _validParams = [
            'ifMatch',
            'accountId',
            'restrictCreateServiceId',
            'restrictCreatePlatformApikey',
            'allowedIpAddresses',
            'mfa',
            'userMfa',
            'sessionExpirationInSeconds',
            'sessionInvalidationInSeconds',
            'maxSessionsPerIdentity',
            'systemAccessTokenExpirationInSeconds',
            'systemRefreshTokenExpirationInSeconds',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'restrict_create_service_id': _params.restrictCreateServiceId,
            'restrict_create_platform_apikey': _params.restrictCreatePlatformApikey,
            'allowed_ip_addresses': _params.allowedIpAddresses,
            'mfa': _params.mfa,
            'user_mfa': _params.userMfa,
            'session_expiration_in_seconds': _params.sessionExpirationInSeconds,
            'session_invalidation_in_seconds': _params.sessionInvalidationInSeconds,
            'max_sessions_per_identity': _params.maxSessionsPerIdentity,
            'system_access_token_expiration_in_seconds': _params.systemAccessTokenExpirationInSeconds,
            'system_refresh_token_expiration_in_seconds': _params.systemRefreshTokenExpirationInSeconds,
        };
        var path = {
            'account_id': _params.accountId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'updateAccountSettings');
        var parameters = {
            options: {
                url: '/v1/accounts/{account_id}/settings/identity',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * mFAEnrollmentStatus
     ************************/
    /**
     * Get MFA enrollment status for a single user in the account.
     *
     * Get MFA enrollment status for a single user in the account.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - ID of the account.
     * @param {string} params.iamId - iam_id of the user. This user must be the member of the account.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.UserMfaEnrollments>>}
     */
    IamIdentityV1.prototype.getMfaStatus = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['accountId', 'iamId'];
        var _validParams = ['accountId', 'iamId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'iam_id': _params.iamId,
        };
        var path = {
            'account_id': _params.accountId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'getMfaStatus');
        var parameters = {
            options: {
                url: '/v1/mfa/accounts/{account_id}/status',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Trigger MFA enrollment status report for the account.
     *
     * Trigger MFA enrollment status report for the account by specifying the account ID. It can take a few minutes to
     * generate the report for retrieval.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - ID of the account.
     * @param {string} [params.type] - Optional report type. The supported value is 'mfa_status'. List MFA enrollment
     * status for all the identities.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ReportReference>>}
     */
    IamIdentityV1.prototype.createMfaReport = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['accountId'];
        var _validParams = ['accountId', 'type', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'type': _params.type,
        };
        var path = {
            'account_id': _params.accountId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'createMfaReport');
        var parameters = {
            options: {
                url: '/v1/mfa/accounts/{account_id}/report',
                method: 'POST',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get MFA enrollment status report for the account.
     *
     * Get MFA enrollment status report for the account by specifying the account ID and the reference that is generated
     * by triggering the report. Reports older than a day are deleted when generating a new report.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - ID of the account.
     * @param {string} params.reference - Reference for the report to be generated, You can use 'latest' to get the latest
     * report for the given account.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ReportMfaEnrollmentStatus>>}
     */
    IamIdentityV1.prototype.getMfaReport = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['accountId', 'reference'];
        var _validParams = ['accountId', 'reference', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'account_id': _params.accountId,
            'reference': _params.reference,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'getMfaReport');
        var parameters = {
            options: {
                url: '/v1/mfa/accounts/{account_id}/report/{reference}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * accountSettingsAssignments
     ************************/
    /**
     * List assignments.
     *
     * List account settings assignments.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.accountId] - Account ID of the Assignments to query. This parameter is required unless
     * using a pagetoken.
     * @param {string} [params.templateId] - Filter results by Template Id.
     * @param {string} [params.templateVersion] - Filter results Template Version.
     * @param {string} [params.target] - Filter results by the assignment target.
     * @param {string} [params.targetType] - Filter results by the assignment's target type.
     * @param {number} [params.limit] - Optional size of a single page. Default is 20 items per page. Valid range is 1 to
     * 100.
     * @param {string} [params.pagetoken] - Optional Prev or Next page token returned from a previous query execution.
     * Default is start with first page.
     * @param {string} [params.sort] - If specified, the items are sorted by the value of this property.
     * @param {string} [params.order] - Sort order.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TemplateAssignmentListResponse>>}
     */
    IamIdentityV1.prototype.listAccountSettingsAssignments = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = [];
        var _validParams = [
            'accountId',
            'templateId',
            'templateVersion',
            'target',
            'targetType',
            'limit',
            'pagetoken',
            'sort',
            'order',
            'includeHistory',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'account_id': _params.accountId,
            'template_id': _params.templateId,
            'template_version': _params.templateVersion,
            'target': _params.target,
            'target_type': _params.targetType,
            'limit': _params.limit,
            'pagetoken': _params.pagetoken,
            'sort': _params.sort,
            'order': _params.order,
            'include_history': _params.includeHistory,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'listAccountSettingsAssignments');
        var parameters = {
            options: {
                url: '/v1/account_settings_assignments/',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create assignment.
     *
     * Create an assigment for an account settings template.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.templateId - ID of the template to assign.
     * @param {number} params.templateVersion - Version of the template to assign.
     * @param {string} params.targetType - Type of target to deploy to.
     * @param {string} params.target - Identifier of target to deploy to.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TemplateAssignmentResponse>>}
     */
    IamIdentityV1.prototype.createAccountSettingsAssignment = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['templateId', 'templateVersion', 'targetType', 'target'];
        var _validParams = ['templateId', 'templateVersion', 'targetType', 'target', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'template_id': _params.templateId,
            'template_version': _params.templateVersion,
            'target_type': _params.targetType,
            'target': _params.target,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'createAccountSettingsAssignment');
        var parameters = {
            options: {
                url: '/v1/account_settings_assignments/',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get assignment.
     *
     * Get an assigment for an account settings template.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assignmentId - ID of the Assignment Record.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TemplateAssignmentResponse>>}
     */
    IamIdentityV1.prototype.getAccountSettingsAssignment = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assignmentId'];
        var _validParams = ['assignmentId', 'includeHistory', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'include_history': _params.includeHistory,
        };
        var path = {
            'assignment_id': _params.assignmentId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'getAccountSettingsAssignment');
        var parameters = {
            options: {
                url: '/v1/account_settings_assignments/{assignment_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete assignment.
     *
     * Delete an account settings template assignment. This removes any IAM resources created by this assignment in child
     * accounts.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assignmentId - ID of the Assignment Record.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ExceptionResponse>>}
     */
    IamIdentityV1.prototype.deleteAccountSettingsAssignment = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assignmentId'];
        var _validParams = ['assignmentId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'assignment_id': _params.assignmentId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteAccountSettingsAssignment');
        var parameters = {
            options: {
                url: '/v1/account_settings_assignments/{assignment_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update assignment.
     *
     * Update an account settings assignment. Call this method to retry failed assignments or migrate the settings in
     * child accounts to a new version.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assignmentId - ID of the Assignment Record.
     * @param {string} params.ifMatch - Version of the assignment to be updated. Specify the version that you retrieved
     * when reading the assignment. This value  helps identifying parallel usage of this API. Pass * to indicate to update
     * any version available. This might result in stale updates.
     * @param {number} params.templateVersion - Template version to be applied to the assignment. To retry all failed
     * assignemtns, provide the existing version. To migrate to a different version, provide the new version number.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TemplateAssignmentResponse>>}
     */
    IamIdentityV1.prototype.updateAccountSettingsAssignment = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assignmentId', 'ifMatch', 'templateVersion'];
        var _validParams = ['assignmentId', 'ifMatch', 'templateVersion', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'template_version': _params.templateVersion,
        };
        var path = {
            'assignment_id': _params.assignmentId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'updateAccountSettingsAssignment');
        var parameters = {
            options: {
                url: '/v1/account_settings_assignments/{assignment_id}',
                method: 'PATCH',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * accountSettingsTemplate
     ************************/
    /**
     * List account settings templates.
     *
     * List account settings templates in an enterprise account.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.accountId] - Account ID of the account settings templates to query. This parameter is
     * required unless using a pagetoken.
     * @param {string} [params.limit] - Optional size of a single page.
     * @param {string} [params.pagetoken] - Optional Prev or Next page token returned from a previous query execution.
     * Default is start with first page.
     * @param {string} [params.sort] - Optional sort property. If specified, the returned templated are sorted according
     * to this property.
     * @param {string} [params.order] - Optional sort order.
     * @param {string} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.AccountSettingsTemplateList>>}
     */
    IamIdentityV1.prototype.listAccountSettingsTemplates = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = [];
        var _validParams = [
            'accountId',
            'limit',
            'pagetoken',
            'sort',
            'order',
            'includeHistory',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'account_id': _params.accountId,
            'limit': _params.limit,
            'pagetoken': _params.pagetoken,
            'sort': _params.sort,
            'order': _params.order,
            'include_history': _params.includeHistory,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'listAccountSettingsTemplates');
        var parameters = {
            options: {
                url: '/v1/account_settings_templates',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create an account settings template.
     *
     * Create a new account settings template in an enterprise account.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.accountId] - ID of the account where the template resides.
     * @param {string} [params.name] - The name of the trusted profile template. This is visible only in the enterprise
     * account.
     * @param {string} [params.description] - The description of the trusted profile template. Describe the template for
     * enterprise account users.
     * @param {AccountSettingsComponent} [params.accountSettings] -
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.AccountSettingsTemplateResponse>>}
     */
    IamIdentityV1.prototype.createAccountSettingsTemplate = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = [];
        var _validParams = ['accountId', 'name', 'description', 'accountSettings', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'account_id': _params.accountId,
            'name': _params.name,
            'description': _params.description,
            'account_settings': _params.accountSettings,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'createAccountSettingsTemplate');
        var parameters = {
            options: {
                url: '/v1/account_settings_templates',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get latest version of an account settings template.
     *
     * Get the latest version of a specific account settings template in an enterprise account.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.templateId - ID of the account settings template.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.AccountSettingsTemplateResponse>>}
     */
    IamIdentityV1.prototype.getLatestAccountSettingsTemplateVersion = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['templateId'];
        var _validParams = ['templateId', 'includeHistory', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'include_history': _params.includeHistory,
        };
        var path = {
            'template_id': _params.templateId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'getLatestAccountSettingsTemplateVersion');
        var parameters = {
            options: {
                url: '/v1/account_settings_templates/{template_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete all versions of an account settings template.
     *
     * Delete all versions of an account settings template in an enterprise account. If any version is assigned to child
     * accounts, you must first delete the assignment.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.templateId - ID of the account settings template.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    IamIdentityV1.prototype.deleteAllVersionsOfAccountSettingsTemplate = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['templateId'];
        var _validParams = ['templateId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'template_id': _params.templateId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteAllVersionsOfAccountSettingsTemplate');
        var parameters = {
            options: {
                url: '/v1/account_settings_templates/{template_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List account settings template versions.
     *
     * List the versions of a specific account settings template in an enterprise account.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.templateId - ID of the account settings template.
     * @param {string} [params.limit] - Optional size of a single page.
     * @param {string} [params.pagetoken] - Optional Prev or Next page token returned from a previous query execution.
     * Default is start with first page.
     * @param {string} [params.sort] - Optional sort property. If specified, the returned templated are sorted according
     * to this property.
     * @param {string} [params.order] - Optional sort order.
     * @param {string} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.AccountSettingsTemplateList>>}
     */
    IamIdentityV1.prototype.listVersionsOfAccountSettingsTemplate = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['templateId'];
        var _validParams = [
            'templateId',
            'limit',
            'pagetoken',
            'sort',
            'order',
            'includeHistory',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'limit': _params.limit,
            'pagetoken': _params.pagetoken,
            'sort': _params.sort,
            'order': _params.order,
            'include_history': _params.includeHistory,
        };
        var path = {
            'template_id': _params.templateId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'listVersionsOfAccountSettingsTemplate');
        var parameters = {
            options: {
                url: '/v1/account_settings_templates/{template_id}/versions',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create a new version of an account settings template.
     *
     * Create a new version of an account settings template in an Enterprise Account.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.templateId - ID of the account settings template.
     * @param {string} [params.accountId] - ID of the account where the template resides.
     * @param {string} [params.name] - The name of the trusted profile template. This is visible only in the enterprise
     * account.
     * @param {string} [params.description] - The description of the trusted profile template. Describe the template for
     * enterprise account users.
     * @param {AccountSettingsComponent} [params.accountSettings] -
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.AccountSettingsTemplateResponse>>}
     */
    IamIdentityV1.prototype.createAccountSettingsTemplateVersion = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['templateId'];
        var _validParams = [
            'templateId',
            'accountId',
            'name',
            'description',
            'accountSettings',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'account_id': _params.accountId,
            'name': _params.name,
            'description': _params.description,
            'account_settings': _params.accountSettings,
        };
        var path = {
            'template_id': _params.templateId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'createAccountSettingsTemplateVersion');
        var parameters = {
            options: {
                url: '/v1/account_settings_templates/{template_id}/versions',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get version of an account settings template.
     *
     * Get a specific version of an account settings template in an Enterprise Account.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.templateId - ID of the account settings template.
     * @param {string} params.version - Version of the account settings template.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.AccountSettingsTemplateResponse>>}
     */
    IamIdentityV1.prototype.getAccountSettingsTemplateVersion = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['templateId', 'version'];
        var _validParams = ['templateId', 'version', 'includeHistory', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'include_history': _params.includeHistory,
        };
        var path = {
            'template_id': _params.templateId,
            'version': _params.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'getAccountSettingsTemplateVersion');
        var parameters = {
            options: {
                url: '/v1/account_settings_templates/{template_id}/versions/{version}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update version of an account settings template.
     *
     * Update a specific version of an account settings template in an Enterprise Account.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.ifMatch - Entity tag of the Template to be updated. Specify the tag that you retrieved when
     * reading the account settings template. This value helps identifying parallel usage of this API. Pass * to indicate
     * to update any version available. This might result in stale updates.
     * @param {string} params.templateId - ID of the account settings template.
     * @param {string} params.version - Version of the account settings template.
     * @param {string} [params.accountId] - ID of the account where the template resides.
     * @param {string} [params.name] - The name of the trusted profile template. This is visible only in the enterprise
     * account.
     * @param {string} [params.description] - The description of the trusted profile template. Describe the template for
     * enterprise account users.
     * @param {AccountSettingsComponent} [params.accountSettings] -
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.AccountSettingsTemplateResponse>>}
     */
    IamIdentityV1.prototype.updateAccountSettingsTemplateVersion = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['ifMatch', 'templateId', 'version'];
        var _validParams = [
            'ifMatch',
            'templateId',
            'version',
            'accountId',
            'name',
            'description',
            'accountSettings',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'account_id': _params.accountId,
            'name': _params.name,
            'description': _params.description,
            'account_settings': _params.accountSettings,
        };
        var path = {
            'template_id': _params.templateId,
            'version': _params.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'updateAccountSettingsTemplateVersion');
        var parameters = {
            options: {
                url: '/v1/account_settings_templates/{template_id}/versions/{version}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete version of an account settings template.
     *
     * Delete a specific version of an account settings template in an Enterprise Account.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.templateId - ID of the account settings template.
     * @param {string} params.version - Version of the account settings template.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    IamIdentityV1.prototype.deleteAccountSettingsTemplateVersion = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['templateId', 'version'];
        var _validParams = ['templateId', 'version', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'template_id': _params.templateId,
            'version': _params.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteAccountSettingsTemplateVersion');
        var parameters = {
            options: {
                url: '/v1/account_settings_templates/{template_id}/versions/{version}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Commit a template version.
     *
     * Commit a specific version of an account settings template in an Enterprise Account. A Template must be committed
     * before being assigned, and once committed, can no longer be modified.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.templateId - ID of the account settings template.
     * @param {string} params.version - Version of the account settings template.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    IamIdentityV1.prototype.commitAccountSettingsTemplate = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['templateId', 'version'];
        var _validParams = ['templateId', 'version', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'template_id': _params.templateId,
            'version': _params.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'commitAccountSettingsTemplate');
        var parameters = {
            options: {
                url: '/v1/account_settings_templates/{template_id}/versions/{version}/commit',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * activityOperations
     ************************/
    /**
     * Trigger activity report for the account.
     *
     * Trigger activity report for the account by specifying the account ID. It can take a few minutes to generate the
     * report for retrieval.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - ID of the account.
     * @param {string} [params.type] - Optional report type. The supported value is 'inactive'. List all identities that
     * have not authenticated within the time indicated by duration.
     * @param {string} [params.duration] - Optional duration of the report. The supported unit of duration is hours.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ReportReference>>}
     */
    IamIdentityV1.prototype.createReport = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['accountId'];
        var _validParams = ['accountId', 'type', 'duration', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'type': _params.type,
            'duration': _params.duration,
        };
        var path = {
            'account_id': _params.accountId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'createReport');
        var parameters = {
            options: {
                url: '/v1/activity/accounts/{account_id}/report',
                method: 'POST',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get activity report for the account.
     *
     * Get activity report for the account by specifying the account ID and the reference that is generated by triggering
     * the report. Reports older than a day are deleted when generating a new report.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - ID of the account.
     * @param {string} params.reference - Reference for the report to be generated, You can use 'latest' to get the latest
     * report for the given account.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.Report>>}
     */
    IamIdentityV1.prototype.getReport = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['accountId', 'reference'];
        var _validParams = ['accountId', 'reference', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'account_id': _params.accountId,
            'reference': _params.reference,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'getReport');
        var parameters = {
            options: {
                url: '/v1/activity/accounts/{account_id}/report/{reference}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * trustedProfileAssignments
     ************************/
    /**
     * List assignments.
     *
     * List trusted profile template assignments.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.accountId] - Account ID of the Assignments to query. This parameter is required unless
     * using a pagetoken.
     * @param {string} [params.templateId] - Filter results by Template Id.
     * @param {string} [params.templateVersion] - Filter results Template Version.
     * @param {string} [params.target] - Filter results by the assignment target.
     * @param {string} [params.targetType] - Filter results by the assignment's target type.
     * @param {number} [params.limit] - Optional size of a single page. Default is 20 items per page. Valid range is 1 to
     * 100.
     * @param {string} [params.pagetoken] - Optional Prev or Next page token returned from a previous query execution.
     * Default is start with first page.
     * @param {string} [params.sort] - If specified, the items are sorted by the value of this property.
     * @param {string} [params.order] - Sort order.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TemplateAssignmentListResponse>>}
     */
    IamIdentityV1.prototype.listTrustedProfileAssignments = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = [];
        var _validParams = [
            'accountId',
            'templateId',
            'templateVersion',
            'target',
            'targetType',
            'limit',
            'pagetoken',
            'sort',
            'order',
            'includeHistory',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'account_id': _params.accountId,
            'template_id': _params.templateId,
            'template_version': _params.templateVersion,
            'target': _params.target,
            'target_type': _params.targetType,
            'limit': _params.limit,
            'pagetoken': _params.pagetoken,
            'sort': _params.sort,
            'order': _params.order,
            'include_history': _params.includeHistory,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'listTrustedProfileAssignments');
        var parameters = {
            options: {
                url: '/v1/profile_assignments/',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create assignment.
     *
     * Create an assigment for a trusted profile template.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.templateId - ID of the template to assign.
     * @param {number} params.templateVersion - Version of the template to assign.
     * @param {string} params.targetType - Type of target to deploy to.
     * @param {string} params.target - Identifier of target to deploy to.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TemplateAssignmentResponse>>}
     */
    IamIdentityV1.prototype.createTrustedProfileAssignment = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['templateId', 'templateVersion', 'targetType', 'target'];
        var _validParams = ['templateId', 'templateVersion', 'targetType', 'target', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'template_id': _params.templateId,
            'template_version': _params.templateVersion,
            'target_type': _params.targetType,
            'target': _params.target,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'createTrustedProfileAssignment');
        var parameters = {
            options: {
                url: '/v1/profile_assignments/',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get assignment.
     *
     * Get an assigment for a trusted profile template.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assignmentId - ID of the Assignment Record.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TemplateAssignmentResponse>>}
     */
    IamIdentityV1.prototype.getTrustedProfileAssignment = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assignmentId'];
        var _validParams = ['assignmentId', 'includeHistory', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'include_history': _params.includeHistory,
        };
        var path = {
            'assignment_id': _params.assignmentId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'getTrustedProfileAssignment');
        var parameters = {
            options: {
                url: '/v1/profile_assignments/{assignment_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete assignment.
     *
     * Delete a trusted profile assignment. This removes any IAM resources created by this assignment in child accounts.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assignmentId - ID of the Assignment Record.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ExceptionResponse>>}
     */
    IamIdentityV1.prototype.deleteTrustedProfileAssignment = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assignmentId'];
        var _validParams = ['assignmentId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'assignment_id': _params.assignmentId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteTrustedProfileAssignment');
        var parameters = {
            options: {
                url: '/v1/profile_assignments/{assignment_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update assignment.
     *
     * Update a trusted profile assignment. Call this method to retry failed assignments or migrate the trusted profile in
     * child accounts to a new version.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assignmentId - ID of the Assignment Record.
     * @param {string} params.ifMatch - Version of the Assignment to be updated. Specify the version that you retrieved
     * when reading the Assignment. This value  helps identifying parallel usage of this API. Pass * to indicate to update
     * any version available. This might result in stale updates.
     * @param {number} params.templateVersion - Template version to be applied to the assignment. To retry all failed
     * assignemtns, provide the existing version. To migrate to a different version, provide the new version number.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TemplateAssignmentResponse>>}
     */
    IamIdentityV1.prototype.updateTrustedProfileAssignment = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assignmentId', 'ifMatch', 'templateVersion'];
        var _validParams = ['assignmentId', 'ifMatch', 'templateVersion', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'template_version': _params.templateVersion,
        };
        var path = {
            'assignment_id': _params.assignmentId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'updateTrustedProfileAssignment');
        var parameters = {
            options: {
                url: '/v1/profile_assignments/{assignment_id}',
                method: 'PATCH',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * trustedProfileTemplate
     ************************/
    /**
     * List trusted profile templates.
     *
     * List the trusted profile templates in an enterprise account.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.accountId] - Account ID of the trusted profile templates to query. This parameter is
     * required unless using a pagetoken.
     * @param {string} [params.limit] - Optional size of a single page.
     * @param {string} [params.pagetoken] - Optional Prev or Next page token returned from a previous query execution.
     * Default is start with first page.
     * @param {string} [params.sort] - Optional sort property. If specified, the returned templates are sorted according
     * to this property.
     * @param {string} [params.order] - Optional sort order.
     * @param {string} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfileTemplateList>>}
     */
    IamIdentityV1.prototype.listProfileTemplates = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = [];
        var _validParams = [
            'accountId',
            'limit',
            'pagetoken',
            'sort',
            'order',
            'includeHistory',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'account_id': _params.accountId,
            'limit': _params.limit,
            'pagetoken': _params.pagetoken,
            'sort': _params.sort,
            'order': _params.order,
            'include_history': _params.includeHistory,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'listProfileTemplates');
        var parameters = {
            options: {
                url: '/v1/profile_templates',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create a trusted profile template.
     *
     * Create a new trusted profile template in an enterprise account.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.accountId] - ID of the account where the template resides.
     * @param {string} [params.name] - The name of the trusted profile template. This is visible only in the enterprise
     * account. Required field when creating a new template. Otherwise this field is optional. If the field is included it
     * will change the name value for all existing versions of the template.
     * @param {string} [params.description] - The description of the trusted profile template. Describe the template for
     * enterprise account users.
     * @param {TemplateProfileComponentRequest} [params.profile] - Input body parameters for the TemplateProfileComponent.
     * @param {PolicyTemplateReference[]} [params.policyTemplateReferences] - Existing policy templates that you can
     * reference to assign access in the trusted profile component.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfileTemplateResponse>>}
     */
    IamIdentityV1.prototype.createProfileTemplate = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = [];
        var _validParams = [
            'accountId',
            'name',
            'description',
            'profile',
            'policyTemplateReferences',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'account_id': _params.accountId,
            'name': _params.name,
            'description': _params.description,
            'profile': _params.profile,
            'policy_template_references': _params.policyTemplateReferences,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'createProfileTemplate');
        var parameters = {
            options: {
                url: '/v1/profile_templates',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get latest version of a trusted profile template.
     *
     * Get the latest version of a trusted profile template in an enterprise account.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.templateId - ID of the trusted profile template.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfileTemplateResponse>>}
     */
    IamIdentityV1.prototype.getLatestProfileTemplateVersion = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['templateId'];
        var _validParams = ['templateId', 'includeHistory', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'include_history': _params.includeHistory,
        };
        var path = {
            'template_id': _params.templateId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'getLatestProfileTemplateVersion');
        var parameters = {
            options: {
                url: '/v1/profile_templates/{template_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete all versions of a trusted profile template.
     *
     * Delete all versions of a trusted profile template in an enterprise account. If any version is assigned to child
     * accounts, you must first delete the assignment.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.templateId - ID of the trusted profile template.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    IamIdentityV1.prototype.deleteAllVersionsOfProfileTemplate = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['templateId'];
        var _validParams = ['templateId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'template_id': _params.templateId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteAllVersionsOfProfileTemplate');
        var parameters = {
            options: {
                url: '/v1/profile_templates/{template_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List trusted profile template versions.
     *
     * List the versions of a trusted profile template in an enterprise account.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.templateId - ID of the trusted profile template.
     * @param {string} [params.limit] - Optional size of a single page.
     * @param {string} [params.pagetoken] - Optional Prev or Next page token returned from a previous query execution.
     * Default is start with first page.
     * @param {string} [params.sort] - Optional sort property. If specified, the returned templated are sorted according
     * to this property.
     * @param {string} [params.order] - Optional sort order.
     * @param {string} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfileTemplateList>>}
     */
    IamIdentityV1.prototype.listVersionsOfProfileTemplate = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['templateId'];
        var _validParams = [
            'templateId',
            'limit',
            'pagetoken',
            'sort',
            'order',
            'includeHistory',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'limit': _params.limit,
            'pagetoken': _params.pagetoken,
            'sort': _params.sort,
            'order': _params.order,
            'include_history': _params.includeHistory,
        };
        var path = {
            'template_id': _params.templateId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'listVersionsOfProfileTemplate');
        var parameters = {
            options: {
                url: '/v1/profile_templates/{template_id}/versions',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create new version of a trusted profile template.
     *
     * Create a new version of a trusted profile template in an enterprise account.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.templateId - ID of the trusted profile template.
     * @param {string} [params.accountId] - ID of the account where the template resides.
     * @param {string} [params.name] - The name of the trusted profile template. This is visible only in the enterprise
     * account. Required field when creating a new template. Otherwise this field is optional. If the field is included it
     * will change the name value for all existing versions of the template.
     * @param {string} [params.description] - The description of the trusted profile template. Describe the template for
     * enterprise account users.
     * @param {TemplateProfileComponentRequest} [params.profile] - Input body parameters for the TemplateProfileComponent.
     * @param {PolicyTemplateReference[]} [params.policyTemplateReferences] - Existing policy templates that you can
     * reference to assign access in the trusted profile component.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfileTemplateResponse>>}
     */
    IamIdentityV1.prototype.createProfileTemplateVersion = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['templateId'];
        var _validParams = [
            'templateId',
            'accountId',
            'name',
            'description',
            'profile',
            'policyTemplateReferences',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'account_id': _params.accountId,
            'name': _params.name,
            'description': _params.description,
            'profile': _params.profile,
            'policy_template_references': _params.policyTemplateReferences,
        };
        var path = {
            'template_id': _params.templateId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'createProfileTemplateVersion');
        var parameters = {
            options: {
                url: '/v1/profile_templates/{template_id}/versions',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get version of trusted profile template.
     *
     * Get a specific version of a trusted profile template in an enterprise account.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.templateId - ID of the trusted profile template.
     * @param {string} params.version - Version of the Profile Template.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfileTemplateResponse>>}
     */
    IamIdentityV1.prototype.getProfileTemplateVersion = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['templateId', 'version'];
        var _validParams = ['templateId', 'version', 'includeHistory', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'include_history': _params.includeHistory,
        };
        var path = {
            'template_id': _params.templateId,
            'version': _params.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'getProfileTemplateVersion');
        var parameters = {
            options: {
                url: '/v1/profile_templates/{template_id}/versions/{version}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update version of trusted profile template.
     *
     * Update a specific version of a trusted profile template in an enterprise account.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.ifMatch - Entity tag of the Template to be updated. Specify the tag that you retrieved when
     * reading the Profile Template. This value helps identifying parallel usage of this API. Pass * to indicate to update
     * any version available. This might result in stale updates.
     * @param {string} params.templateId - ID of the trusted profile template.
     * @param {string} params.version - Version of the Profile Template.
     * @param {string} [params.accountId] - ID of the account where the template resides.
     * @param {string} [params.name] - The name of the trusted profile template. This is visible only in the enterprise
     * account. Required field when creating a new template. Otherwise this field is optional. If the field is included it
     * will change the name value for all existing versions of the template.
     * @param {string} [params.description] - The description of the trusted profile template. Describe the template for
     * enterprise account users.
     * @param {TemplateProfileComponentRequest} [params.profile] - Input body parameters for the TemplateProfileComponent.
     * @param {PolicyTemplateReference[]} [params.policyTemplateReferences] - Existing policy templates that you can
     * reference to assign access in the trusted profile component.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfileTemplateResponse>>}
     */
    IamIdentityV1.prototype.updateProfileTemplateVersion = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['ifMatch', 'templateId', 'version'];
        var _validParams = [
            'ifMatch',
            'templateId',
            'version',
            'accountId',
            'name',
            'description',
            'profile',
            'policyTemplateReferences',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'account_id': _params.accountId,
            'name': _params.name,
            'description': _params.description,
            'profile': _params.profile,
            'policy_template_references': _params.policyTemplateReferences,
        };
        var path = {
            'template_id': _params.templateId,
            'version': _params.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'updateProfileTemplateVersion');
        var parameters = {
            options: {
                url: '/v1/profile_templates/{template_id}/versions/{version}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete version of trusted profile template.
     *
     * Delete a specific version of a trusted profile template in an enterprise account. If the version is assigned to
     * child accounts, you must first delete the assignment.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.templateId - ID of the trusted profile template.
     * @param {string} params.version - Version of the Profile Template.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    IamIdentityV1.prototype.deleteProfileTemplateVersion = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['templateId', 'version'];
        var _validParams = ['templateId', 'version', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'template_id': _params.templateId,
            'version': _params.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteProfileTemplateVersion');
        var parameters = {
            options: {
                url: '/v1/profile_templates/{template_id}/versions/{version}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Commit a template version.
     *
     * Commit a specific version of a trusted profile template in an enterprise account. You must commit a template before
     * you can assign it to child accounts. Once a template is committed, you can no longer modify the template.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.templateId - ID of the trusted profile template.
     * @param {string} params.version - Version of the Profile Template.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    IamIdentityV1.prototype.commitProfileTemplate = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['templateId', 'version'];
        var _validParams = ['templateId', 'version', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'template_id': _params.templateId,
            'version': _params.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamIdentityV1.DEFAULT_SERVICE_NAME, 'v1', 'commitProfileTemplate');
        var parameters = {
            options: {
                url: '/v1/profile_templates/{template_id}/versions/{version}/commit',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    IamIdentityV1.DEFAULT_SERVICE_URL = 'https://iam.cloud.ibm.com';
    IamIdentityV1.DEFAULT_SERVICE_NAME = 'iam_identity';
    return IamIdentityV1;
}(ibm_cloud_sdk_core_1.BaseService));
/*************************
 * interfaces
 ************************/
(function (IamIdentityV1) {
    /** Constants for the `listApiKeys` operation. */
    var ListApiKeysConstants;
    (function (ListApiKeysConstants) {
        /** Optional parameter to define the scope of the queried API keys. Can be 'entity' (default) or 'account'. */
        var Scope;
        (function (Scope) {
            Scope["ENTITY"] = "entity";
            Scope["ACCOUNT"] = "account";
        })(Scope = ListApiKeysConstants.Scope || (ListApiKeysConstants.Scope = {}));
        /** Optional parameter to filter the type of the queried API keys. Can be 'user' or 'serviceid'. */
        var Type;
        (function (Type) {
            Type["USER"] = "user";
            Type["SERVICEID"] = "serviceid";
        })(Type = ListApiKeysConstants.Type || (ListApiKeysConstants.Type = {}));
        /** Optional sort order, valid values are asc and desc. Default: asc. */
        var Order;
        (function (Order) {
            Order["ASC"] = "asc";
            Order["DESC"] = "desc";
        })(Order = ListApiKeysConstants.Order || (ListApiKeysConstants.Order = {}));
    })(ListApiKeysConstants = IamIdentityV1.ListApiKeysConstants || (IamIdentityV1.ListApiKeysConstants = {}));
    /** Constants for the `listServiceIds` operation. */
    var ListServiceIdsConstants;
    (function (ListServiceIdsConstants) {
        /** Optional sort order, valid values are asc and desc. Default: asc. */
        var Order;
        (function (Order) {
            Order["ASC"] = "asc";
            Order["DESC"] = "desc";
        })(Order = ListServiceIdsConstants.Order || (ListServiceIdsConstants.Order = {}));
    })(ListServiceIdsConstants = IamIdentityV1.ListServiceIdsConstants || (IamIdentityV1.ListServiceIdsConstants = {}));
    /** Constants for the `listProfiles` operation. */
    var ListProfilesConstants;
    (function (ListProfilesConstants) {
        /** Optional sort order, valid values are asc and desc. Default: asc. */
        var Order;
        (function (Order) {
            Order["ASC"] = "asc";
            Order["DESC"] = "desc";
        })(Order = ListProfilesConstants.Order || (ListProfilesConstants.Order = {}));
    })(ListProfilesConstants = IamIdentityV1.ListProfilesConstants || (IamIdentityV1.ListProfilesConstants = {}));
    /** Constants for the `setProfileIdentity` operation. */
    var SetProfileIdentityConstants;
    (function (SetProfileIdentityConstants) {
        /** Type of the identity. */
        var IdentityType;
        (function (IdentityType) {
            IdentityType["USER"] = "user";
            IdentityType["SERVICEID"] = "serviceid";
            IdentityType["CRN"] = "crn";
        })(IdentityType = SetProfileIdentityConstants.IdentityType || (SetProfileIdentityConstants.IdentityType = {}));
        /** Type of the identity. */
        var Type;
        (function (Type) {
            Type["USER"] = "user";
            Type["SERVICEID"] = "serviceid";
            Type["CRN"] = "crn";
        })(Type = SetProfileIdentityConstants.Type || (SetProfileIdentityConstants.Type = {}));
    })(SetProfileIdentityConstants = IamIdentityV1.SetProfileIdentityConstants || (IamIdentityV1.SetProfileIdentityConstants = {}));
    /** Constants for the `getProfileIdentity` operation. */
    var GetProfileIdentityConstants;
    (function (GetProfileIdentityConstants) {
        /** Type of the identity. */
        var IdentityType;
        (function (IdentityType) {
            IdentityType["USER"] = "user";
            IdentityType["SERVICEID"] = "serviceid";
            IdentityType["CRN"] = "crn";
        })(IdentityType = GetProfileIdentityConstants.IdentityType || (GetProfileIdentityConstants.IdentityType = {}));
    })(GetProfileIdentityConstants = IamIdentityV1.GetProfileIdentityConstants || (IamIdentityV1.GetProfileIdentityConstants = {}));
    /** Constants for the `deleteProfileIdentity` operation. */
    var DeleteProfileIdentityConstants;
    (function (DeleteProfileIdentityConstants) {
        /** Type of the identity. */
        var IdentityType;
        (function (IdentityType) {
            IdentityType["USER"] = "user";
            IdentityType["SERVICEID"] = "serviceid";
            IdentityType["CRN"] = "crn";
        })(IdentityType = DeleteProfileIdentityConstants.IdentityType || (DeleteProfileIdentityConstants.IdentityType = {}));
    })(DeleteProfileIdentityConstants = IamIdentityV1.DeleteProfileIdentityConstants || (IamIdentityV1.DeleteProfileIdentityConstants = {}));
    /** Constants for the `updateAccountSettings` operation. */
    var UpdateAccountSettingsConstants;
    (function (UpdateAccountSettingsConstants) {
        /** Defines whether or not creating a service ID is access controlled. Valid values: * RESTRICTED - only users assigned the 'Service ID creator' role on the IAM Identity Service can create service IDs, including the account owner * NOT_RESTRICTED - all members of an account can create service IDs * NOT_SET - to 'unset' a previous set value. */
        var RestrictCreateServiceId;
        (function (RestrictCreateServiceId) {
            RestrictCreateServiceId["RESTRICTED"] = "RESTRICTED";
            RestrictCreateServiceId["NOT_RESTRICTED"] = "NOT_RESTRICTED";
            RestrictCreateServiceId["NOT_SET"] = "NOT_SET";
        })(RestrictCreateServiceId = UpdateAccountSettingsConstants.RestrictCreateServiceId || (UpdateAccountSettingsConstants.RestrictCreateServiceId = {}));
        /** Defines whether or not creating platform API keys is access controlled. Valid values: * RESTRICTED - only users assigned the 'User API key creator' role on the IAM Identity Service can create API keys, including the account owner * NOT_RESTRICTED - all members of an account can create platform API keys * NOT_SET - to 'unset' a previous set value. */
        var RestrictCreatePlatformApikey;
        (function (RestrictCreatePlatformApikey) {
            RestrictCreatePlatformApikey["RESTRICTED"] = "RESTRICTED";
            RestrictCreatePlatformApikey["NOT_RESTRICTED"] = "NOT_RESTRICTED";
            RestrictCreatePlatformApikey["NOT_SET"] = "NOT_SET";
        })(RestrictCreatePlatformApikey = UpdateAccountSettingsConstants.RestrictCreatePlatformApikey || (UpdateAccountSettingsConstants.RestrictCreatePlatformApikey = {}));
        /** Defines the MFA trait for the account. Valid values: * NONE - No MFA trait set * NONE_NO_ROPC- No MFA, disable CLI logins with only a password * TOTP - For all non-federated IBMId users * TOTP4ALL - For all users * LEVEL1 - Email-based MFA for all users * LEVEL2 - TOTP-based MFA for all users * LEVEL3 - U2F MFA for all users. */
        var Mfa;
        (function (Mfa) {
            Mfa["NONE"] = "NONE";
            Mfa["NONE_NO_ROPC"] = "NONE_NO_ROPC";
            Mfa["TOTP"] = "TOTP";
            Mfa["TOTP4ALL"] = "TOTP4ALL";
            Mfa["LEVEL1"] = "LEVEL1";
            Mfa["LEVEL2"] = "LEVEL2";
            Mfa["LEVEL3"] = "LEVEL3";
        })(Mfa = UpdateAccountSettingsConstants.Mfa || (UpdateAccountSettingsConstants.Mfa = {}));
    })(UpdateAccountSettingsConstants = IamIdentityV1.UpdateAccountSettingsConstants || (IamIdentityV1.UpdateAccountSettingsConstants = {}));
    /** Constants for the `listAccountSettingsAssignments` operation. */
    var ListAccountSettingsAssignmentsConstants;
    (function (ListAccountSettingsAssignmentsConstants) {
        /** Filter results by the assignment's target type. */
        var TargetType;
        (function (TargetType) {
            TargetType["ACCOUNT"] = "Account";
            TargetType["ACCOUNTGROUP"] = "AccountGroup";
        })(TargetType = ListAccountSettingsAssignmentsConstants.TargetType || (ListAccountSettingsAssignmentsConstants.TargetType = {}));
        /** If specified, the items are sorted by the value of this property. */
        var Sort;
        (function (Sort) {
            Sort["TEMPLATE_ID"] = "template_id";
            Sort["CREATED_AT"] = "created_at";
            Sort["LAST_MODIFIED_AT"] = "last_modified_at";
        })(Sort = ListAccountSettingsAssignmentsConstants.Sort || (ListAccountSettingsAssignmentsConstants.Sort = {}));
        /** Sort order. */
        var Order;
        (function (Order) {
            Order["ASC"] = "asc";
            Order["DESC"] = "desc";
        })(Order = ListAccountSettingsAssignmentsConstants.Order || (ListAccountSettingsAssignmentsConstants.Order = {}));
    })(ListAccountSettingsAssignmentsConstants = IamIdentityV1.ListAccountSettingsAssignmentsConstants || (IamIdentityV1.ListAccountSettingsAssignmentsConstants = {}));
    /** Constants for the `createAccountSettingsAssignment` operation. */
    var CreateAccountSettingsAssignmentConstants;
    (function (CreateAccountSettingsAssignmentConstants) {
        /** Type of target to deploy to. */
        var TargetType;
        (function (TargetType) {
            TargetType["ACCOUNT"] = "Account";
            TargetType["ACCOUNTGROUP"] = "AccountGroup";
        })(TargetType = CreateAccountSettingsAssignmentConstants.TargetType || (CreateAccountSettingsAssignmentConstants.TargetType = {}));
    })(CreateAccountSettingsAssignmentConstants = IamIdentityV1.CreateAccountSettingsAssignmentConstants || (IamIdentityV1.CreateAccountSettingsAssignmentConstants = {}));
    /** Constants for the `listAccountSettingsTemplates` operation. */
    var ListAccountSettingsTemplatesConstants;
    (function (ListAccountSettingsTemplatesConstants) {
        /** Optional sort property. If specified, the returned templated are sorted according to this property. */
        var Sort;
        (function (Sort) {
            Sort["CREATED_AT"] = "created_at";
            Sort["LAST_MODIFIED_AT"] = "last_modified_at";
            Sort["NAME"] = "name";
        })(Sort = ListAccountSettingsTemplatesConstants.Sort || (ListAccountSettingsTemplatesConstants.Sort = {}));
        /** Optional sort order. */
        var Order;
        (function (Order) {
            Order["ASC"] = "asc";
            Order["DESC"] = "desc";
        })(Order = ListAccountSettingsTemplatesConstants.Order || (ListAccountSettingsTemplatesConstants.Order = {}));
    })(ListAccountSettingsTemplatesConstants = IamIdentityV1.ListAccountSettingsTemplatesConstants || (IamIdentityV1.ListAccountSettingsTemplatesConstants = {}));
    /** Constants for the `listVersionsOfAccountSettingsTemplate` operation. */
    var ListVersionsOfAccountSettingsTemplateConstants;
    (function (ListVersionsOfAccountSettingsTemplateConstants) {
        /** Optional sort property. If specified, the returned templated are sorted according to this property. */
        var Sort;
        (function (Sort) {
            Sort["CREATED_AT"] = "created_at";
            Sort["LAST_MODIFIED_AT"] = "last_modified_at";
            Sort["NAME"] = "name";
        })(Sort = ListVersionsOfAccountSettingsTemplateConstants.Sort || (ListVersionsOfAccountSettingsTemplateConstants.Sort = {}));
        /** Optional sort order. */
        var Order;
        (function (Order) {
            Order["ASC"] = "asc";
            Order["DESC"] = "desc";
        })(Order = ListVersionsOfAccountSettingsTemplateConstants.Order || (ListVersionsOfAccountSettingsTemplateConstants.Order = {}));
    })(ListVersionsOfAccountSettingsTemplateConstants = IamIdentityV1.ListVersionsOfAccountSettingsTemplateConstants || (IamIdentityV1.ListVersionsOfAccountSettingsTemplateConstants = {}));
    /** Constants for the `listTrustedProfileAssignments` operation. */
    var ListTrustedProfileAssignmentsConstants;
    (function (ListTrustedProfileAssignmentsConstants) {
        /** Filter results by the assignment's target type. */
        var TargetType;
        (function (TargetType) {
            TargetType["ACCOUNT"] = "Account";
            TargetType["ACCOUNTGROUP"] = "AccountGroup";
        })(TargetType = ListTrustedProfileAssignmentsConstants.TargetType || (ListTrustedProfileAssignmentsConstants.TargetType = {}));
        /** If specified, the items are sorted by the value of this property. */
        var Sort;
        (function (Sort) {
            Sort["TEMPLATE_ID"] = "template_id";
            Sort["CREATED_AT"] = "created_at";
            Sort["LAST_MODIFIED_AT"] = "last_modified_at";
        })(Sort = ListTrustedProfileAssignmentsConstants.Sort || (ListTrustedProfileAssignmentsConstants.Sort = {}));
        /** Sort order. */
        var Order;
        (function (Order) {
            Order["ASC"] = "asc";
            Order["DESC"] = "desc";
        })(Order = ListTrustedProfileAssignmentsConstants.Order || (ListTrustedProfileAssignmentsConstants.Order = {}));
    })(ListTrustedProfileAssignmentsConstants = IamIdentityV1.ListTrustedProfileAssignmentsConstants || (IamIdentityV1.ListTrustedProfileAssignmentsConstants = {}));
    /** Constants for the `createTrustedProfileAssignment` operation. */
    var CreateTrustedProfileAssignmentConstants;
    (function (CreateTrustedProfileAssignmentConstants) {
        /** Type of target to deploy to. */
        var TargetType;
        (function (TargetType) {
            TargetType["ACCOUNT"] = "Account";
            TargetType["ACCOUNTGROUP"] = "AccountGroup";
        })(TargetType = CreateTrustedProfileAssignmentConstants.TargetType || (CreateTrustedProfileAssignmentConstants.TargetType = {}));
    })(CreateTrustedProfileAssignmentConstants = IamIdentityV1.CreateTrustedProfileAssignmentConstants || (IamIdentityV1.CreateTrustedProfileAssignmentConstants = {}));
    /** Constants for the `listProfileTemplates` operation. */
    var ListProfileTemplatesConstants;
    (function (ListProfileTemplatesConstants) {
        /** Optional sort property. If specified, the returned templates are sorted according to this property. */
        var Sort;
        (function (Sort) {
            Sort["CREATED_AT"] = "created_at";
            Sort["LAST_MODIFIED_AT"] = "last_modified_at";
            Sort["NAME"] = "name";
        })(Sort = ListProfileTemplatesConstants.Sort || (ListProfileTemplatesConstants.Sort = {}));
        /** Optional sort order. */
        var Order;
        (function (Order) {
            Order["ASC"] = "asc";
            Order["DESC"] = "desc";
        })(Order = ListProfileTemplatesConstants.Order || (ListProfileTemplatesConstants.Order = {}));
    })(ListProfileTemplatesConstants = IamIdentityV1.ListProfileTemplatesConstants || (IamIdentityV1.ListProfileTemplatesConstants = {}));
    /** Constants for the `listVersionsOfProfileTemplate` operation. */
    var ListVersionsOfProfileTemplateConstants;
    (function (ListVersionsOfProfileTemplateConstants) {
        /** Optional sort property. If specified, the returned templated are sorted according to this property. */
        var Sort;
        (function (Sort) {
            Sort["CREATED_AT"] = "created_at";
            Sort["LAST_MODIFIED_AT"] = "last_modified_at";
            Sort["NAME"] = "name";
        })(Sort = ListVersionsOfProfileTemplateConstants.Sort || (ListVersionsOfProfileTemplateConstants.Sort = {}));
        /** Optional sort order. */
        var Order;
        (function (Order) {
            Order["ASC"] = "asc";
            Order["DESC"] = "desc";
        })(Order = ListVersionsOfProfileTemplateConstants.Order || (ListVersionsOfProfileTemplateConstants.Order = {}));
    })(ListVersionsOfProfileTemplateConstants = IamIdentityV1.ListVersionsOfProfileTemplateConstants || (IamIdentityV1.ListVersionsOfProfileTemplateConstants = {}));
})(IamIdentityV1 || (IamIdentityV1 = {}));
module.exports = IamIdentityV1;
//# sourceMappingURL=v1.js.map
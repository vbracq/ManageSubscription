"use strict";
/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * IBM OpenAPI SDK Code Generator Version: 3.43.0-49eab5c7-20211117-152138
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * This is the API to use for managing private catalogs for IBM Cloud. Private catalogs provide a way to centrally
 * manage access to products in the IBM Cloud catalog and your own catalogs.
 *
 * API Version: 1.0
 */
var CatalogManagementV1 = /** @class */ (function (_super) {
    __extends(CatalogManagementV1, _super);
    /**
     * Construct a CatalogManagementV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {CatalogManagementV1}
     */
    function CatalogManagementV1(options) {
        var _this = this;
        options = options || {};
        _this = _super.call(this, options) || this;
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        else {
            _this.setServiceUrl(CatalogManagementV1.DEFAULT_SERVICE_URL);
        }
        return _this;
    }
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of CatalogManagementV1 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {CatalogManagementV1}
     */
    CatalogManagementV1.newInstance = function (options) {
        options = options || {};
        if (!options.serviceName) {
            options.serviceName = this.DEFAULT_SERVICE_NAME;
        }
        if (!options.authenticator) {
            options.authenticator = (0, ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment)(options.serviceName);
        }
        var service = new CatalogManagementV1(options);
        service.configureService(options.serviceName);
        if (options.serviceUrl) {
            service.setServiceUrl(options.serviceUrl);
        }
        return service;
    };
    /*************************
     * account
     ************************/
    /**
     * Get catalog account settings.
     *
     * Get the account level settings for the account for private catalog.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Account>>}
     */
    CatalogManagementV1.prototype.getCatalogAccount = function (params) {
        var _params = __assign({}, params);
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getCatalogAccount');
        var parameters = {
            options: {
                url: '/catalogaccount',
                method: 'GET',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update account settings.
     *
     * Update the account level settings for the account for private catalog.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.id] - Account identification.
     * @param {boolean} [params.hideIbmCloudCatalog] - Hide the public catalog in this account.
     * @param {Filters} [params.accountFilters] - Filters for account and catalog filters.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.updateCatalogAccount = function (params) {
        var _params = __assign({}, params);
        var body = {
            'id': _params.id,
            'hide_IBM_cloud_catalog': _params.hideIbmCloudCatalog,
            'account_filters': _params.accountFilters,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'updateCatalogAccount');
        var parameters = {
            options: {
                url: '/catalogaccount',
                method: 'PUT',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get catalog account audit log.
     *
     * Get the audit log associated with a catalog account.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.AuditLog>>}
     */
    CatalogManagementV1.prototype.getCatalogAccountAudit = function (params) {
        var _params = __assign({}, params);
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getCatalogAccountAudit');
        var parameters = {
            options: {
                url: '/catalogaccount/audit',
                method: 'GET',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get catalog account filters.
     *
     * Get the accumulated filters of the account and of the catalogs you have access to.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.catalog] - catalog id. Narrow down filters to the account and just the one catalog.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.AccumulatedFilters>>}
     */
    CatalogManagementV1.prototype.getCatalogAccountFilters = function (params) {
        var _params = __assign({}, params);
        var query = {
            'catalog': _params.catalog,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getCatalogAccountFilters');
        var parameters = {
            options: {
                url: '/catalogaccount/filters',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * catalogs
     ************************/
    /**
     * Get list of catalogs.
     *
     * Retrieves the available catalogs for a given account. This can be used by an unauthenticated user to retrieve the
     * public catalog.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.CatalogSearchResult>>}
     */
    CatalogManagementV1.prototype.listCatalogs = function (params) {
        var _params = __assign({}, params);
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'listCatalogs');
        var parameters = {
            options: {
                url: '/catalogs',
                method: 'GET',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create a catalog.
     *
     * Create a catalog for a given account.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.id] - Unique ID.
     * @param {string} [params.rev] - Cloudant revision.
     * @param {string} [params.label] - Display Name in the requested language.
     * @param {string} [params.shortDescription] - Description in the requested language.
     * @param {string} [params.catalogIconUrl] - URL for an icon associated with this catalog.
     * @param {string[]} [params.tags] - List of tags associated with this catalog.
     * @param {Feature[]} [params.features] - List of features associated with this catalog.
     * @param {boolean} [params.disabled] - Denotes whether a catalog is disabled.
     * @param {string} [params.resourceGroupId] - Resource group id the catalog is owned by.
     * @param {string} [params.owningAccount] - Account that owns catalog.
     * @param {Filters} [params.catalogFilters] - Filters for account and catalog filters.
     * @param {SyndicationResource} [params.syndicationSettings] - Feature information.
     * @param {string} [params.kind] - Kind of catalog. Supported kinds are offering and vpe.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Catalog>>}
     */
    CatalogManagementV1.prototype.createCatalog = function (params) {
        var _params = __assign({}, params);
        var body = {
            'id': _params.id,
            '_rev': _params.rev,
            'label': _params.label,
            'short_description': _params.shortDescription,
            'catalog_icon_url': _params.catalogIconUrl,
            'tags': _params.tags,
            'features': _params.features,
            'disabled': _params.disabled,
            'resource_group_id': _params.resourceGroupId,
            'owning_account': _params.owningAccount,
            'catalog_filters': _params.catalogFilters,
            'syndication_settings': _params.syndicationSettings,
            'kind': _params.kind,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'createCatalog');
        var parameters = {
            options: {
                url: '/catalogs',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get catalog.
     *
     * Get a catalog. This can also be used by an unauthenticated user to get the public catalog.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Catalog>>}
     */
    CatalogManagementV1.prototype.getCatalog = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getCatalog');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update catalog.
     *
     * Update a catalog.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} [params.id] - Unique ID.
     * @param {string} [params.rev] - Cloudant revision.
     * @param {string} [params.label] - Display Name in the requested language.
     * @param {string} [params.shortDescription] - Description in the requested language.
     * @param {string} [params.catalogIconUrl] - URL for an icon associated with this catalog.
     * @param {string[]} [params.tags] - List of tags associated with this catalog.
     * @param {Feature[]} [params.features] - List of features associated with this catalog.
     * @param {boolean} [params.disabled] - Denotes whether a catalog is disabled.
     * @param {string} [params.resourceGroupId] - Resource group id the catalog is owned by.
     * @param {string} [params.owningAccount] - Account that owns catalog.
     * @param {Filters} [params.catalogFilters] - Filters for account and catalog filters.
     * @param {SyndicationResource} [params.syndicationSettings] - Feature information.
     * @param {string} [params.kind] - Kind of catalog. Supported kinds are offering and vpe.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Catalog>>}
     */
    CatalogManagementV1.prototype.replaceCatalog = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'id': _params.id,
            '_rev': _params.rev,
            'label': _params.label,
            'short_description': _params.shortDescription,
            'catalog_icon_url': _params.catalogIconUrl,
            'tags': _params.tags,
            'features': _params.features,
            'disabled': _params.disabled,
            'resource_group_id': _params.resourceGroupId,
            'owning_account': _params.owningAccount,
            'catalog_filters': _params.catalogFilters,
            'syndication_settings': _params.syndicationSettings,
            'kind': _params.kind,
        };
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'replaceCatalog');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete catalog.
     *
     * Delete a catalog.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.deleteCatalog = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteCatalog');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get catalog audit log.
     *
     * Get the audit log associated with a catalog.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.AuditLog>>}
     */
    CatalogManagementV1.prototype.getCatalogAudit = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getCatalogAudit');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/audit',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * offerings
     ************************/
    /**
     * Get consumption offerings.
     *
     * Retrieve the available offerings from both public and from the account that currently scoped for consumption. These
     * copies cannot be used for updating. They are not complete and only return what is visible to the caller. This can
     * be used by an unauthenticated user to retreive publicly available offerings.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {boolean} [params.digest] - true - Strip down the content of what is returned. For example don't return the
     * readme. Makes the result much smaller. Defaults to false.
     * @param {string} [params.catalog] - catalog id. Narrow search down to just a particular catalog. It will apply the
     * catalog's public filters to the public catalog offerings on the result.
     * @param {string} [params.select] - What should be selected. Default is 'all' which will return both public and
     * private offerings. 'public' returns only the public offerings and 'private' returns only the private offerings.
     * @param {boolean} [params.includeHidden] - true - include offerings which have been marked as hidden. The default is
     * false and hidden offerings are not returned.
     * @param {number} [params.limit] - number or results to return.
     * @param {number} [params.offset] - number of results to skip before returning values.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.OfferingSearchResult>>}
     */
    CatalogManagementV1.prototype.getConsumptionOfferings = function (params) {
        var _params = __assign({}, params);
        var query = {
            'digest': _params.digest,
            'catalog': _params.catalog,
            'select': _params.select,
            'includeHidden': _params.includeHidden,
            'limit': _params.limit,
            'offset': _params.offset,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getConsumptionOfferings');
        var parameters = {
            options: {
                url: '/offerings',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get list of offerings.
     *
     * Retrieve the available offerings in the specified catalog. This can also be used by an unauthenticated user to
     * retreive publicly available offerings.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {boolean} [params.digest] - true - Strip down the content of what is returned. For example don't return the
     * readme. Makes the result much smaller. Defaults to false.
     * @param {number} [params.limit] - The maximum number of results to return.
     * @param {number} [params.offset] - The number of results to skip before returning values.
     * @param {string} [params.name] - Only return results that contain the specified string.
     * @param {string} [params.sort] - The field on which the output is sorted. Sorts by default by **label** property.
     * Available fields are **name**, **label**, **created**, and **updated**. By adding **-** (i.e. **-label**) in front
     * of the query string, you can specify descending order. Default is ascending order.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.OfferingSearchResult>>}
     */
    CatalogManagementV1.prototype.listOfferings = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'digest': _params.digest,
            'limit': _params.limit,
            'offset': _params.offset,
            'name': _params.name,
            'sort': _params.sort,
        };
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'listOfferings');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/offerings',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create offering.
     *
     * Create an offering.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} [params.id] - unique id.
     * @param {string} [params.rev] - Cloudant revision.
     * @param {string} [params.url] - The url for this specific offering.
     * @param {string} [params.crn] - The crn for this specific offering.
     * @param {string} [params.label] - Display Name in the requested language.
     * @param {string} [params.name] - The programmatic name of this offering.
     * @param {string} [params.offeringIconUrl] - URL for an icon associated with this offering.
     * @param {string} [params.offeringDocsUrl] - URL for an additional docs with this offering.
     * @param {string} [params.offeringSupportUrl] - [deprecated] - Use offering.support instead.  URL to be displayed in
     * the Consumption UI for getting support on this offering.
     * @param {string[]} [params.tags] - List of tags associated with this catalog.
     * @param {string[]} [params.keywords] - List of keywords associated with offering, typically used to search for it.
     * @param {Rating} [params.rating] - Repository info for offerings.
     * @param {string} [params.created] - The date and time this catalog was created.
     * @param {string} [params.updated] - The date and time this catalog was last updated.
     * @param {string} [params.shortDescription] - Short description in the requested language.
     * @param {string} [params.longDescription] - Long description in the requested language.
     * @param {Feature[]} [params.features] - list of features associated with this offering.
     * @param {Kind[]} [params.kinds] - Array of kind.
     * @param {boolean} [params.permitRequestIbmPublicPublish] - Is it permitted to request publishing to IBM or Public.
     * @param {boolean} [params.ibmPublishApproved] - Indicates if this offering has been approved for use by all IBMers.
     * @param {boolean} [params.publicPublishApproved] - Indicates if this offering has been approved for use by all IBM
     * Cloud users.
     * @param {string} [params.publicOriginalCrn] - The original offering CRN that this publish entry came from.
     * @param {string} [params.publishPublicCrn] - The crn of the public catalog entry of this offering.
     * @param {string} [params.portalApprovalRecord] - The portal's approval record ID.
     * @param {string} [params.portalUiUrl] - The portal UI URL.
     * @param {string} [params.catalogId] - The id of the catalog containing this offering.
     * @param {string} [params.catalogName] - The name of the catalog.
     * @param {JsonObject} [params.metadata] - Map of metadata values for this offering.
     * @param {string} [params.disclaimer] - A disclaimer for this offering.
     * @param {boolean} [params.hidden] - Determine if this offering should be displayed in the Consumption UI.
     * @param {string} [params.provider] - Deprecated - Provider of this offering.
     * @param {ProviderInfo} [params.providerInfo] - Information on the provider for this offering, or omitted if no
     * provider information is given.
     * @param {RepoInfo} [params.repoInfo] - Repository info for offerings.
     * @param {Support} [params.support] - Offering Support information.
     * @param {MediaItem[]} [params.media] - A list of media items related to this offering.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Offering>>}
     */
    CatalogManagementV1.prototype.createOffering = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'id': _params.id,
            '_rev': _params.rev,
            'url': _params.url,
            'crn': _params.crn,
            'label': _params.label,
            'name': _params.name,
            'offering_icon_url': _params.offeringIconUrl,
            'offering_docs_url': _params.offeringDocsUrl,
            'offering_support_url': _params.offeringSupportUrl,
            'tags': _params.tags,
            'keywords': _params.keywords,
            'rating': _params.rating,
            'created': _params.created,
            'updated': _params.updated,
            'short_description': _params.shortDescription,
            'long_description': _params.longDescription,
            'features': _params.features,
            'kinds': _params.kinds,
            'permit_request_ibm_public_publish': _params.permitRequestIbmPublicPublish,
            'ibm_publish_approved': _params.ibmPublishApproved,
            'public_publish_approved': _params.publicPublishApproved,
            'public_original_crn': _params.publicOriginalCrn,
            'publish_public_crn': _params.publishPublicCrn,
            'portal_approval_record': _params.portalApprovalRecord,
            'portal_ui_url': _params.portalUiUrl,
            'catalog_id': _params.catalogId,
            'catalog_name': _params.catalogName,
            'metadata': _params.metadata,
            'disclaimer': _params.disclaimer,
            'hidden': _params.hidden,
            'provider': _params.provider,
            'provider_info': _params.providerInfo,
            'repo_info': _params.repoInfo,
            'support': _params.support,
            'media': _params.media,
        };
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'createOffering');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/offerings',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Import offering version.
     *
     * Import new version to offering from a tgz.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.offeringId - Offering identification.
     * @param {string[]} [params.tags] - Tags array.
     * @param {string[]} [params.targetKinds] - Target kinds.  Current valid values are 'iks', 'roks', 'vcenter', and
     * 'terraform'.
     * @param {string} [params.content] - byte array representing the content to be imported.  Only supported for OVA
     * images at this time.
     * @param {string} [params.zipurl] - URL path to zip location.  If not specified, must provide content in the body of
     * this call.
     * @param {string} [params.targetVersion] - The semver value for this new version, if not found in the zip url package
     * content.
     * @param {boolean} [params.includeConfig] - Add all possible configuration values to this version when importing.
     * @param {boolean} [params.isVsi] - Indicates that the current terraform template is used to install a VSI Image.
     * @param {string} [params.repoType] - The type of repository containing this version.  Valid values are 'public_git'
     * or 'enterprise_git'.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Offering>>}
     */
    CatalogManagementV1.prototype.importOfferingVersion = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'offeringId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'tags': _params.tags,
            'target_kinds': _params.targetKinds,
            'content': _params.content,
        };
        var query = {
            'zipurl': _params.zipurl,
            'targetVersion': _params.targetVersion,
            'includeConfig': _params.includeConfig,
            'isVSI': _params.isVsi,
            'repoType': _params.repoType,
        };
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'offering_id': _params.offeringId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'importOfferingVersion');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/offerings/{offering_id}/version',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Import offering.
     *
     * Import a new offering from a tgz.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string[]} [params.tags] - Tags array.
     * @param {string[]} [params.targetKinds] - Target kinds.  Current valid values are 'iks', 'roks', 'vcenter', and
     * 'terraform'.
     * @param {string} [params.content] - byte array representing the content to be imported.  Only supported for OVA
     * images at this time.
     * @param {string} [params.zipurl] - URL path to zip location.  If not specified, must provide content in this post
     * body.
     * @param {string} [params.offeringId] - Re-use the specified offeringID during import.
     * @param {string} [params.targetVersion] - The semver value for this new version.
     * @param {boolean} [params.includeConfig] - Add all possible configuration items when creating this version.
     * @param {boolean} [params.isVsi] - Indicates that the current terraform template is used to install a VSI Image.
     * @param {string} [params.repoType] - The type of repository containing this version.  Valid values are 'public_git'
     * or 'enterprise_git'.
     * @param {string} [params.xAuthToken] - Authentication token used to access the specified zip file.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Offering>>}
     */
    CatalogManagementV1.prototype.importOffering = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'tags': _params.tags,
            'target_kinds': _params.targetKinds,
            'content': _params.content,
        };
        var query = {
            'zipurl': _params.zipurl,
            'offeringID': _params.offeringId,
            'targetVersion': _params.targetVersion,
            'includeConfig': _params.includeConfig,
            'isVSI': _params.isVsi,
            'repoType': _params.repoType,
        };
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'importOffering');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/import/offerings',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'X-Auth-Token': _params.xAuthToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Reload offering.
     *
     * Reload an existing version in offering from a tgz.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.offeringId - Offering identification.
     * @param {string} params.targetVersion - The semver value for this new version.
     * @param {string[]} [params.tags] - Tags array.
     * @param {string[]} [params.targetKinds] - Target kinds.  Current valid values are 'iks', 'roks', 'vcenter', and
     * 'terraform'.
     * @param {string} [params.content] - byte array representing the content to be imported.  Only supported for OVA
     * images at this time.
     * @param {string} [params.zipurl] - URL path to zip location.  If not specified, must provide content in this post
     * body.
     * @param {string} [params.repoType] - The type of repository containing this version.  Valid values are 'public_git'
     * or 'enterprise_git'.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Offering>>}
     */
    CatalogManagementV1.prototype.reloadOffering = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'offeringId', 'targetVersion'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'tags': _params.tags,
            'target_kinds': _params.targetKinds,
            'content': _params.content,
        };
        var query = {
            'targetVersion': _params.targetVersion,
            'zipurl': _params.zipurl,
            'repoType': _params.repoType,
        };
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'offering_id': _params.offeringId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'reloadOffering');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/offerings/{offering_id}/reload',
                method: 'PUT',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get offering.
     *
     * Get an offering. This can be used by an unauthenticated user for publicly available offerings.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.offeringId - Offering identification.
     * @param {string} [params.type] - Offering Parameter Type.  Valid values are 'name' or 'id'.  Default is 'id'.
     * @param {boolean} [params.digest] - Return the digest format of the specified offering.  Default is false.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Offering>>}
     */
    CatalogManagementV1.prototype.getOffering = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'offeringId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'type': _params.type,
            'digest': _params.digest,
        };
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'offering_id': _params.offeringId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getOffering');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/offerings/{offering_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update offering.
     *
     * Update an offering.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.offeringId - Offering identification.
     * @param {string} [params.id] - unique id.
     * @param {string} [params.rev] - Cloudant revision.
     * @param {string} [params.url] - The url for this specific offering.
     * @param {string} [params.crn] - The crn for this specific offering.
     * @param {string} [params.label] - Display Name in the requested language.
     * @param {string} [params.name] - The programmatic name of this offering.
     * @param {string} [params.offeringIconUrl] - URL for an icon associated with this offering.
     * @param {string} [params.offeringDocsUrl] - URL for an additional docs with this offering.
     * @param {string} [params.offeringSupportUrl] - [deprecated] - Use offering.support instead.  URL to be displayed in
     * the Consumption UI for getting support on this offering.
     * @param {string[]} [params.tags] - List of tags associated with this catalog.
     * @param {string[]} [params.keywords] - List of keywords associated with offering, typically used to search for it.
     * @param {Rating} [params.rating] - Repository info for offerings.
     * @param {string} [params.created] - The date and time this catalog was created.
     * @param {string} [params.updated] - The date and time this catalog was last updated.
     * @param {string} [params.shortDescription] - Short description in the requested language.
     * @param {string} [params.longDescription] - Long description in the requested language.
     * @param {Feature[]} [params.features] - list of features associated with this offering.
     * @param {Kind[]} [params.kinds] - Array of kind.
     * @param {boolean} [params.permitRequestIbmPublicPublish] - Is it permitted to request publishing to IBM or Public.
     * @param {boolean} [params.ibmPublishApproved] - Indicates if this offering has been approved for use by all IBMers.
     * @param {boolean} [params.publicPublishApproved] - Indicates if this offering has been approved for use by all IBM
     * Cloud users.
     * @param {string} [params.publicOriginalCrn] - The original offering CRN that this publish entry came from.
     * @param {string} [params.publishPublicCrn] - The crn of the public catalog entry of this offering.
     * @param {string} [params.portalApprovalRecord] - The portal's approval record ID.
     * @param {string} [params.portalUiUrl] - The portal UI URL.
     * @param {string} [params.catalogId] - The id of the catalog containing this offering.
     * @param {string} [params.catalogName] - The name of the catalog.
     * @param {JsonObject} [params.metadata] - Map of metadata values for this offering.
     * @param {string} [params.disclaimer] - A disclaimer for this offering.
     * @param {boolean} [params.hidden] - Determine if this offering should be displayed in the Consumption UI.
     * @param {string} [params.provider] - Deprecated - Provider of this offering.
     * @param {ProviderInfo} [params.providerInfo] - Information on the provider for this offering, or omitted if no
     * provider information is given.
     * @param {RepoInfo} [params.repoInfo] - Repository info for offerings.
     * @param {Support} [params.support] - Offering Support information.
     * @param {MediaItem[]} [params.media] - A list of media items related to this offering.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Offering>>}
     */
    CatalogManagementV1.prototype.replaceOffering = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'offeringId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'id': _params.id,
            '_rev': _params.rev,
            'url': _params.url,
            'crn': _params.crn,
            'label': _params.label,
            'name': _params.name,
            'offering_icon_url': _params.offeringIconUrl,
            'offering_docs_url': _params.offeringDocsUrl,
            'offering_support_url': _params.offeringSupportUrl,
            'tags': _params.tags,
            'keywords': _params.keywords,
            'rating': _params.rating,
            'created': _params.created,
            'updated': _params.updated,
            'short_description': _params.shortDescription,
            'long_description': _params.longDescription,
            'features': _params.features,
            'kinds': _params.kinds,
            'permit_request_ibm_public_publish': _params.permitRequestIbmPublicPublish,
            'ibm_publish_approved': _params.ibmPublishApproved,
            'public_publish_approved': _params.publicPublishApproved,
            'public_original_crn': _params.publicOriginalCrn,
            'publish_public_crn': _params.publishPublicCrn,
            'portal_approval_record': _params.portalApprovalRecord,
            'portal_ui_url': _params.portalUiUrl,
            'catalog_id': _params.catalogId,
            'catalog_name': _params.catalogName,
            'metadata': _params.metadata,
            'disclaimer': _params.disclaimer,
            'hidden': _params.hidden,
            'provider': _params.provider,
            'provider_info': _params.providerInfo,
            'repo_info': _params.repoInfo,
            'support': _params.support,
            'media': _params.media,
        };
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'offering_id': _params.offeringId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'replaceOffering');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/offerings/{offering_id}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update offering.
     *
     * Update an offering.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.offeringId - Offering identification.
     * @param {string} params.ifMatch - Offering etag contained in quotes.
     * @param {JsonPatchOperation[]} [params.updates] -
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Offering>>}
     */
    CatalogManagementV1.prototype.updateOffering = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'offeringId', 'ifMatch'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = _params.updates;
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'offering_id': _params.offeringId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'updateOffering');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/offerings/{offering_id}',
                method: 'PATCH',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json-patch+json',
                    'If-Match': _params.ifMatch,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete offering.
     *
     * Delete an offering.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.offeringId - Offering identification.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.deleteOffering = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'offeringId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'offering_id': _params.offeringId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteOffering');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/offerings/{offering_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get offering audit log.
     *
     * Get the audit log associated with an offering.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.offeringId - Offering identifier.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.AuditLog>>}
     */
    CatalogManagementV1.prototype.getOfferingAudit = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'offeringId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'offering_id': _params.offeringId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getOfferingAudit');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/offerings/{offering_id}/audit',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Upload icon for offering.
     *
     * Upload an icon file to be stored in GC. File is uploaded as a binary payload - not as a form.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.offeringId - Offering identification.
     * @param {string} params.fileName - Name of the file name that is being uploaded.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Offering>>}
     */
    CatalogManagementV1.prototype.replaceOfferingIcon = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'offeringId', 'fileName'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'offering_id': _params.offeringId,
            'file_name': _params.fileName,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'replaceOfferingIcon');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/offerings/{offering_id}/icon/{file_name}',
                method: 'PUT',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Allow offering to be published.
     *
     * Approve or disapprove the offering to be allowed to publish to the IBM Public Catalog. Options:
     * * `allow_request` - (Allow requesting to publish to IBM)
     * * `ibm` - (Allow publishing to be visible to IBM only)
     * * `public` - (Allow publishing to be visible to everyone, including IBM)
     *
     * If disapprove `public`, then `ibm` approval will not  be changed. If disapprove `ibm` then `public` will
     * automatically be disapproved. if disapprove `allow_request` then all rights to publish will be removed. This is
     * because the process steps always go first through `allow` to `ibm` and then to `public`. `ibm` cannot be skipped.
     * Only users with Approval IAM authority can use this. Approvers should use the catalog and offering id from the
     * public catalog since they wouldn't have access to the private offering.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.offeringId - Offering identification.
     * @param {string} params.approvalType - Type of approval, ibm or public.
     * @param {string} params.approved - Approve (true) or disapprove (false).
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.ApprovalResult>>}
     */
    CatalogManagementV1.prototype.updateOfferingIbm = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'offeringId', 'approvalType', 'approved'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'offering_id': _params.offeringId,
            'approval_type': _params.approvalType,
            'approved': _params.approved,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'updateOfferingIbm');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/offerings/{offering_id}/publish/{approval_type}/{approved}',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Allows offering to be deprecated.
     *
     * Approve or disapprove the offering to be deprecated.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.offeringId - Offering identification.
     * @param {string} params.setting - Set deprecation (true) or cancel deprecation (false).
     * @param {string} [params.description] - Additional information that users can provide to be displayed in deprecation
     * notification.
     * @param {number} [params.daysUntilDeprecate] - Specifies the amount of days until product is not available in
     * catalog.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.deprecateOffering = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'offeringId', 'setting'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'description': _params.description,
            'days_until_deprecate': _params.daysUntilDeprecate,
        };
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'offering_id': _params.offeringId,
            'setting': _params.setting,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'deprecateOffering');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/offerings/{offering_id}/deprecate/{setting}',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get version updates.
     *
     * Get available updates for the specified version.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.offeringId - Offering identification.
     * @param {string} params.kind - The kind of offering (e.g, helm, ova, terraform ...).
     * @param {string} params.xAuthRefreshToken - IAM Refresh token.
     * @param {string} [params.target] - The target kind of the currently installed version (e.g. iks, roks, etc).
     * @param {string} [params.version] - optionaly provide an existing version to check updates for if one is not given,
     * all version will be returned.
     * @param {string} [params.clusterId] - The id of the cluster where this version was installed.
     * @param {string} [params.region] - The region of the cluster where this version was installed.
     * @param {string} [params.resourceGroupId] - The resource group id of the cluster where this version was installed.
     * @param {string} [params.namespace] - The namespace of the cluster where this version was installed.
     * @param {string} [params.sha] - The sha value of the currently installed version.
     * @param {string} [params.channel] - Optionally provide the channel value of the currently installed version.
     * @param {string[]} [params.namespaces] - Optionally provide a list of namespaces used for the currently installed
     * version.
     * @param {boolean} [params.allNamespaces] - Optionally indicate that the current version was installed in all
     * namespaces.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.VersionUpdateDescriptor[]>>}
     */
    CatalogManagementV1.prototype.getOfferingUpdates = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'offeringId', 'kind', 'xAuthRefreshToken'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'kind': _params.kind,
            'target': _params.target,
            'version': _params.version,
            'cluster_id': _params.clusterId,
            'region': _params.region,
            'resource_group_id': _params.resourceGroupId,
            'namespace': _params.namespace,
            'sha': _params.sha,
            'channel': _params.channel,
            'namespaces': _params.namespaces,
            'all_namespaces': _params.allNamespaces,
        };
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'offering_id': _params.offeringId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getOfferingUpdates');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/offerings/{offering_id}/updates',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'X-Auth-Refresh-Token': _params.xAuthRefreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get offering source.
     *
     * Get an offering's source.  This request requires authorization, even for public offerings.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.version - The version being requested.
     * @param {string} [params.accept] - The type of the response: application/yaml, application/json, or
     * application/x-gzip.
     * @param {string} [params.catalogId] - Catlaog ID.  If not specified, this value will default to the public catalog.
     * @param {string} [params.name] - Offering name.  An offering name or ID must be specified.
     * @param {string} [params.id] - Offering id.  An offering name or ID must be specified.
     * @param {string} [params.kind] - The kind of offering (e.g. helm, ova, terraform...).
     * @param {string} [params.channel] - The channel value of the specified version.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<NodeJS.ReadableStream>>}
     */
    CatalogManagementV1.prototype.getOfferingSource = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['version'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': _params.version,
            'catalogID': _params.catalogId,
            'name': _params.name,
            'id': _params.id,
            'kind': _params.kind,
            'channel': _params.channel,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getOfferingSource');
        var parameters = {
            options: {
                url: '/offering/source',
                method: 'GET',
                qs: query,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': _params.accept,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * versions
     ************************/
    /**
     * Get version about information.
     *
     * Get the about information, in markdown, for the current version.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<string>>}
     */
    CatalogManagementV1.prototype.getOfferingAbout = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'version_loc_id': _params.versionLocId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getOfferingAbout');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}/about',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'text/markdown',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get version license content.
     *
     * Get the license content for the specified license ID in the specified version.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {string} params.licenseId - The ID of the license, which maps to the file name in the 'licenses' directory
     * of this verions tgz file.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<string>>}
     */
    CatalogManagementV1.prototype.getOfferingLicense = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId', 'licenseId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'version_loc_id': _params.versionLocId,
            'license_id': _params.licenseId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getOfferingLicense');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}/licenses/{license_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'text/plain',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get version's container images.
     *
     * Get the list of container images associated with the specified version. The "image_manifest_url" property of the
     * version should be the URL for the image manifest, and the operation will return that content.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.ImageManifest>>}
     */
    CatalogManagementV1.prototype.getOfferingContainerImages = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'version_loc_id': _params.versionLocId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getOfferingContainerImages');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}/containerImages',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Deprecate version immediately.
     *
     * Deprecate the specified version.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.deprecateVersion = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'version_loc_id': _params.versionLocId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'deprecateVersion');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}/deprecate',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Sets version to be deprecated in a certain time period.
     *
     * Set or cancel the version to be deprecated.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {string} params.setting - Set deprecation (true) or cancel deprecation (false).
     * @param {string} [params.description] - Additional information that users can provide to be displayed in deprecation
     * notification.
     * @param {number} [params.daysUntilDeprecate] - Specifies the amount of days until product is not available in
     * catalog.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.setDeprecateVersion = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId', 'setting'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'description': _params.description,
            'days_until_deprecate': _params.daysUntilDeprecate,
        };
        var path = {
            'version_loc_id': _params.versionLocId,
            'setting': _params.setting,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'setDeprecateVersion');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}/deprecate/{setting}',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Publish version to account members.
     *
     * Publish the specified version so it is viewable by account members.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.accountPublishVersion = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'version_loc_id': _params.versionLocId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'accountPublishVersion');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}/account-publish',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Publish version to IBMers in public catalog.
     *
     * Publish the specified version so that it is visible to IBMers in the public catalog.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.ibmPublishVersion = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'version_loc_id': _params.versionLocId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'ibmPublishVersion');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}/ibm-publish',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Publish version to all users in public catalog.
     *
     * Publish the specified version so it is visible to all users in the public catalog.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.publicPublishVersion = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'version_loc_id': _params.versionLocId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'publicPublishVersion');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}/public-publish',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Commit version.
     *
     * Commit a working copy of the specified version.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.commitVersion = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'version_loc_id': _params.versionLocId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'commitVersion');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}/commit',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Copy version to new target kind.
     *
     * Copy the specified version to a new target kind within the same offering.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {string[]} [params.tags] - Tags array.
     * @param {string[]} [params.targetKinds] - Target kinds.  Current valid values are 'iks', 'roks', 'vcenter', and
     * 'terraform'.
     * @param {string} [params.content] - byte array representing the content to be imported.  Only supported for OVA
     * images at this time.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.copyVersion = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'tags': _params.tags,
            'target_kinds': _params.targetKinds,
            'content': _params.content,
        };
        var path = {
            'version_loc_id': _params.versionLocId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'copyVersion');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}/copy',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create working copy of version.
     *
     * Create a working copy of the specified version.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Version>>}
     */
    CatalogManagementV1.prototype.getOfferingWorkingCopy = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'version_loc_id': _params.versionLocId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getOfferingWorkingCopy');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}/workingcopy',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get offering/kind/version 'branch'.
     *
     * Get the Offering/Kind/Version 'branch' for the specified locator ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Offering>>}
     */
    CatalogManagementV1.prototype.getVersion = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'version_loc_id': _params.versionLocId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getVersion');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete version.
     *
     * Delete the specified version.  If the version is an active version with a working copy, the working copy will be
     * deleted as well.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.deleteVersion = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'version_loc_id': _params.versionLocId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteVersion');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * deploy
     ************************/
    /**
     * Get kubernetes cluster.
     *
     * Get the contents of the specified kubernetes cluster.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.clusterId - ID of the cluster.
     * @param {string} params.region - Region of the cluster.
     * @param {string} params.xAuthRefreshToken - IAM Refresh token.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.ClusterInfo>>}
     */
    CatalogManagementV1.prototype.getCluster = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['clusterId', 'region', 'xAuthRefreshToken'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'region': _params.region,
        };
        var path = {
            'cluster_id': _params.clusterId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getCluster');
        var parameters = {
            options: {
                url: '/deploy/kubernetes/clusters/{cluster_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'X-Auth-Refresh-Token': _params.xAuthRefreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get cluster namespaces.
     *
     * Get the namespaces associated with the specified kubernetes cluster.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.clusterId - ID of the cluster.
     * @param {string} params.region - Cluster region.
     * @param {string} params.xAuthRefreshToken - IAM Refresh token.
     * @param {number} [params.limit] - The maximum number of results to return.
     * @param {number} [params.offset] - The number of results to skip before returning values.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.NamespaceSearchResult>>}
     */
    CatalogManagementV1.prototype.getNamespaces = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['clusterId', 'region', 'xAuthRefreshToken'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'region': _params.region,
            'limit': _params.limit,
            'offset': _params.offset,
        };
        var path = {
            'cluster_id': _params.clusterId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getNamespaces');
        var parameters = {
            options: {
                url: '/deploy/kubernetes/clusters/{cluster_id}/namespaces',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'X-Auth-Refresh-Token': _params.xAuthRefreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Deploy operators.
     *
     * Deploy operators on a kubernetes cluster.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.xAuthRefreshToken - IAM Refresh token.
     * @param {string} [params.clusterId] - Cluster ID.
     * @param {string} [params.region] - Cluster region.
     * @param {string[]} [params.namespaces] - Kube namespaces to deploy Operator(s) to.
     * @param {boolean} [params.allNamespaces] - Denotes whether to install Operator(s) globally.
     * @param {string} [params.versionLocatorId] - A dotted value of `catalogID`.`versionID`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.OperatorDeployResult[]>>}
     */
    CatalogManagementV1.prototype.deployOperators = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['xAuthRefreshToken'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'cluster_id': _params.clusterId,
            'region': _params.region,
            'namespaces': _params.namespaces,
            'all_namespaces': _params.allNamespaces,
            'version_locator_id': _params.versionLocatorId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'deployOperators');
        var parameters = {
            options: {
                url: '/deploy/kubernetes/olm/operator',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'X-Auth-Refresh-Token': _params.xAuthRefreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List operators.
     *
     * List the operators from a kubernetes cluster.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.xAuthRefreshToken - IAM Refresh token.
     * @param {string} params.clusterId - Cluster identification.
     * @param {string} params.region - Cluster region.
     * @param {string} params.versionLocatorId - A dotted value of `catalogID`.`versionID`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.OperatorDeployResult[]>>}
     */
    CatalogManagementV1.prototype.listOperators = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['xAuthRefreshToken', 'clusterId', 'region', 'versionLocatorId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'cluster_id': _params.clusterId,
            'region': _params.region,
            'version_locator_id': _params.versionLocatorId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'listOperators');
        var parameters = {
            options: {
                url: '/deploy/kubernetes/olm/operator',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'X-Auth-Refresh-Token': _params.xAuthRefreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update operators.
     *
     * Update the operators on a kubernetes cluster.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.xAuthRefreshToken - IAM Refresh token.
     * @param {string} [params.clusterId] - Cluster ID.
     * @param {string} [params.region] - Cluster region.
     * @param {string[]} [params.namespaces] - Kube namespaces to deploy Operator(s) to.
     * @param {boolean} [params.allNamespaces] - Denotes whether to install Operator(s) globally.
     * @param {string} [params.versionLocatorId] - A dotted value of `catalogID`.`versionID`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.OperatorDeployResult[]>>}
     */
    CatalogManagementV1.prototype.replaceOperators = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['xAuthRefreshToken'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'cluster_id': _params.clusterId,
            'region': _params.region,
            'namespaces': _params.namespaces,
            'all_namespaces': _params.allNamespaces,
            'version_locator_id': _params.versionLocatorId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'replaceOperators');
        var parameters = {
            options: {
                url: '/deploy/kubernetes/olm/operator',
                method: 'PUT',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'X-Auth-Refresh-Token': _params.xAuthRefreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete operators.
     *
     * Delete operators from a kubernetes cluster.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.xAuthRefreshToken - IAM Refresh token.
     * @param {string} params.clusterId - Cluster identification.
     * @param {string} params.region - Cluster region.
     * @param {string} params.versionLocatorId - A dotted value of `catalogID`.`versionID`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.deleteOperators = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['xAuthRefreshToken', 'clusterId', 'region', 'versionLocatorId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'cluster_id': _params.clusterId,
            'region': _params.region,
            'version_locator_id': _params.versionLocatorId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteOperators');
        var parameters = {
            options: {
                url: '/deploy/kubernetes/olm/operator',
                method: 'DELETE',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'X-Auth-Refresh-Token': _params.xAuthRefreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Install version.
     *
     * Create an install for the specified version.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {string} params.xAuthRefreshToken - IAM Refresh token.
     * @param {string} [params.clusterId] - Cluster ID.
     * @param {string} [params.region] - Cluster region.
     * @param {string} [params.namespace] - Kube namespace.
     * @param {JsonObject} [params.overrideValues] - Object containing Helm chart override values.  To use a secret for
     * items of type password, specify a JSON encoded value of $ref:#/components/schemas/SecretInstance, prefixed with
     * `cmsm_v1:`.
     * @param {string} [params.entitlementApikey] - Entitlement API Key for this offering.
     * @param {DeployRequestBodySchematics} [params.schematics] - Schematics workspace configuration.
     * @param {string} [params.script] - Script.
     * @param {string} [params.scriptId] - Script ID.
     * @param {string} [params.versionLocatorId] - A dotted value of `catalogID`.`versionID`.
     * @param {string} [params.vcenterId] - VCenter ID.
     * @param {string} [params.vcenterUser] - VCenter User.
     * @param {string} [params.vcenterPassword] - VCenter Password.
     * @param {string} [params.vcenterLocation] - VCenter Location.
     * @param {string} [params.vcenterDatastore] - VCenter Datastore.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.installVersion = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId', 'xAuthRefreshToken'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'cluster_id': _params.clusterId,
            'region': _params.region,
            'namespace': _params.namespace,
            'override_values': _params.overrideValues,
            'entitlement_apikey': _params.entitlementApikey,
            'schematics': _params.schematics,
            'script': _params.script,
            'script_id': _params.scriptId,
            'version_locator_id': _params.versionLocatorId,
            'vcenter_id': _params.vcenterId,
            'vcenter_user': _params.vcenterUser,
            'vcenter_password': _params.vcenterPassword,
            'vcenter_location': _params.vcenterLocation,
            'vcenter_datastore': _params.vcenterDatastore,
        };
        var path = {
            'version_loc_id': _params.versionLocId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'installVersion');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}/install',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Content-Type': 'application/json',
                    'X-Auth-Refresh-Token': _params.xAuthRefreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Pre-install version.
     *
     * Create a pre-install for the specified version.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {string} params.xAuthRefreshToken - IAM Refresh token.
     * @param {string} [params.clusterId] - Cluster ID.
     * @param {string} [params.region] - Cluster region.
     * @param {string} [params.namespace] - Kube namespace.
     * @param {JsonObject} [params.overrideValues] - Object containing Helm chart override values.  To use a secret for
     * items of type password, specify a JSON encoded value of $ref:#/components/schemas/SecretInstance, prefixed with
     * `cmsm_v1:`.
     * @param {string} [params.entitlementApikey] - Entitlement API Key for this offering.
     * @param {DeployRequestBodySchematics} [params.schematics] - Schematics workspace configuration.
     * @param {string} [params.script] - Script.
     * @param {string} [params.scriptId] - Script ID.
     * @param {string} [params.versionLocatorId] - A dotted value of `catalogID`.`versionID`.
     * @param {string} [params.vcenterId] - VCenter ID.
     * @param {string} [params.vcenterUser] - VCenter User.
     * @param {string} [params.vcenterPassword] - VCenter Password.
     * @param {string} [params.vcenterLocation] - VCenter Location.
     * @param {string} [params.vcenterDatastore] - VCenter Datastore.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.preinstallVersion = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId', 'xAuthRefreshToken'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'cluster_id': _params.clusterId,
            'region': _params.region,
            'namespace': _params.namespace,
            'override_values': _params.overrideValues,
            'entitlement_apikey': _params.entitlementApikey,
            'schematics': _params.schematics,
            'script': _params.script,
            'script_id': _params.scriptId,
            'version_locator_id': _params.versionLocatorId,
            'vcenter_id': _params.vcenterId,
            'vcenter_user': _params.vcenterUser,
            'vcenter_password': _params.vcenterPassword,
            'vcenter_location': _params.vcenterLocation,
            'vcenter_datastore': _params.vcenterDatastore,
        };
        var path = {
            'version_loc_id': _params.versionLocId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'preinstallVersion');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}/preinstall',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Content-Type': 'application/json',
                    'X-Auth-Refresh-Token': _params.xAuthRefreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get version pre-install status.
     *
     * Get the pre-install status for the specified version.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {string} params.xAuthRefreshToken - IAM Refresh token.
     * @param {string} [params.clusterId] - ID of the cluster.
     * @param {string} [params.region] - Cluster region.
     * @param {string} [params.namespace] - Required if the version's pre-install scope is `namespace`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.InstallStatus>>}
     */
    CatalogManagementV1.prototype.getPreinstall = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId', 'xAuthRefreshToken'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'cluster_id': _params.clusterId,
            'region': _params.region,
            'namespace': _params.namespace,
        };
        var path = {
            'version_loc_id': _params.versionLocId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getPreinstall');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}/preinstall',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'X-Auth-Refresh-Token': _params.xAuthRefreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Validate offering.
     *
     * Validate the offering associated with the specified version.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {string} params.xAuthRefreshToken - IAM Refresh token.
     * @param {string} [params.clusterId] - Cluster ID.
     * @param {string} [params.region] - Cluster region.
     * @param {string} [params.namespace] - Kube namespace.
     * @param {JsonObject} [params.overrideValues] - Object containing Helm chart override values.  To use a secret for
     * items of type password, specify a JSON encoded value of $ref:#/components/schemas/SecretInstance, prefixed with
     * `cmsm_v1:`.
     * @param {string} [params.entitlementApikey] - Entitlement API Key for this offering.
     * @param {DeployRequestBodySchematics} [params.schematics] - Schematics workspace configuration.
     * @param {string} [params.script] - Script.
     * @param {string} [params.scriptId] - Script ID.
     * @param {string} [params.versionLocatorId] - A dotted value of `catalogID`.`versionID`.
     * @param {string} [params.vcenterId] - VCenter ID.
     * @param {string} [params.vcenterUser] - VCenter User.
     * @param {string} [params.vcenterPassword] - VCenter Password.
     * @param {string} [params.vcenterLocation] - VCenter Location.
     * @param {string} [params.vcenterDatastore] - VCenter Datastore.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.validateInstall = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId', 'xAuthRefreshToken'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'cluster_id': _params.clusterId,
            'region': _params.region,
            'namespace': _params.namespace,
            'override_values': _params.overrideValues,
            'entitlement_apikey': _params.entitlementApikey,
            'schematics': _params.schematics,
            'script': _params.script,
            'script_id': _params.scriptId,
            'version_locator_id': _params.versionLocatorId,
            'vcenter_id': _params.vcenterId,
            'vcenter_user': _params.vcenterUser,
            'vcenter_password': _params.vcenterPassword,
            'vcenter_location': _params.vcenterLocation,
            'vcenter_datastore': _params.vcenterDatastore,
        };
        var path = {
            'version_loc_id': _params.versionLocId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'validateInstall');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}/validation/install',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Content-Type': 'application/json',
                    'X-Auth-Refresh-Token': _params.xAuthRefreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get offering install status.
     *
     * Returns the install status for the specified offering version.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {string} params.xAuthRefreshToken - IAM Refresh token.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Validation>>}
     */
    CatalogManagementV1.prototype.getValidationStatus = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId', 'xAuthRefreshToken'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'version_loc_id': _params.versionLocId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getValidationStatus');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}/validation/install',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'X-Auth-Refresh-Token': _params.xAuthRefreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get override values.
     *
     * Returns the override values that were used to validate the specified offering version.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.versionLocId - A dotted value of `catalogID`.`versionID`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.JsonObject>>}
     */
    CatalogManagementV1.prototype.getOverrideValues = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['versionLocId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'version_loc_id': _params.versionLocId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getOverrideValues');
        var parameters = {
            options: {
                url: '/versions/{version_loc_id}/validation/overridevalues',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * objects
     ************************/
    /**
     * List objects across catalogs.
     *
     * List the available objects from both public and private catalogs. These copies cannot be used for updating. They
     * are not complete and only return what is visible to the caller.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.query - Lucene query string.
     * @param {number} [params.limit] - The maximum number of results to return.
     * @param {number} [params.offset] - The number of results to skip before returning values.
     * @param {boolean} [params.collapse] - When true, hide private objects that correspond to public or IBM published
     * objects.
     * @param {boolean} [params.digest] - Display a digests of search results, has default value of true.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.ObjectSearchResult>>}
     */
    CatalogManagementV1.prototype.searchObjects = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['query'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'query': _params.query,
            'limit': _params.limit,
            'offset': _params.offset,
            'collapse': _params.collapse,
            'digest': _params.digest,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'searchObjects');
        var parameters = {
            options: {
                url: '/objects',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List objects within a catalog.
     *
     * List the available objects within the specified catalog.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {number} [params.limit] - The number of results to return.
     * @param {number} [params.offset] - The number of results to skip before returning values.
     * @param {string} [params.name] - Only return results that contain the specified string.
     * @param {string} [params.sort] - The field on which the output is sorted. Sorts by default by **label** property.
     * Available fields are **name**, **label**, **created**, and **updated**. By adding **-** (i.e. **-label**) in front
     * of the query string, you can specify descending order. Default is ascending order.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.ObjectListResult>>}
     */
    CatalogManagementV1.prototype.listObjects = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'limit': _params.limit,
            'offset': _params.offset,
            'name': _params.name,
            'sort': _params.sort,
        };
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'listObjects');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/objects',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create catalog object.
     *
     * Create an object with a specific catalog.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} [params.id] - unique id.
     * @param {string} [params.name] - The programmatic name of this offering.
     * @param {string} [params.rev] - Cloudant revision.
     * @param {string} [params.crn] - The crn for this specific object.
     * @param {string} [params.url] - The url for this specific object.
     * @param {string} [params.parentId] - The parent for this specific object.
     * @param {string} [params.labelI18n] - Translated display name in the requested language.
     * @param {string} [params.label] - Display name in the requested language.
     * @param {string[]} [params.tags] - List of tags associated with this catalog.
     * @param {string} [params.created] - The date and time this catalog was created.
     * @param {string} [params.updated] - The date and time this catalog was last updated.
     * @param {string} [params.shortDescription] - Short description in the requested language.
     * @param {string} [params.shortDescriptionI18n] - Short description translation.
     * @param {string} [params.kind] - Kind of object.
     * @param {PublishObject} [params.publish] - Publish information.
     * @param {State} [params.state] - Offering state.
     * @param {string} [params.catalogId] - The id of the catalog containing this offering.
     * @param {string} [params.catalogName] - The name of the catalog.
     * @param {JsonObject} [params.data] - Map of data values for this object.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.CatalogObject>>}
     */
    CatalogManagementV1.prototype.createObject = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'id': _params.id,
            'name': _params.name,
            '_rev': _params.rev,
            'crn': _params.crn,
            'url': _params.url,
            'parent_id': _params.parentId,
            'label_i18n': _params.labelI18n,
            'label': _params.label,
            'tags': _params.tags,
            'created': _params.created,
            'updated': _params.updated,
            'short_description': _params.shortDescription,
            'short_description_i18n': _params.shortDescriptionI18n,
            'kind': _params.kind,
            'publish': _params.publish,
            'state': _params.state,
            'catalog_id': _params.catalogId,
            'catalog_name': _params.catalogName,
            'data': _params.data,
        };
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'createObject');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/objects',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get catalog object.
     *
     * Get the specified object from within the specified catalog.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.objectIdentifier - Object identifier.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.CatalogObject>>}
     */
    CatalogManagementV1.prototype.getObject = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'objectIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'object_identifier': _params.objectIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getObject');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/objects/{object_identifier}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update catalog object.
     *
     * Update an object within a specific catalog.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.objectIdentifier - Object identifier.
     * @param {string} [params.id] - unique id.
     * @param {string} [params.name] - The programmatic name of this offering.
     * @param {string} [params.rev] - Cloudant revision.
     * @param {string} [params.crn] - The crn for this specific object.
     * @param {string} [params.url] - The url for this specific object.
     * @param {string} [params.parentId] - The parent for this specific object.
     * @param {string} [params.labelI18n] - Translated display name in the requested language.
     * @param {string} [params.label] - Display name in the requested language.
     * @param {string[]} [params.tags] - List of tags associated with this catalog.
     * @param {string} [params.created] - The date and time this catalog was created.
     * @param {string} [params.updated] - The date and time this catalog was last updated.
     * @param {string} [params.shortDescription] - Short description in the requested language.
     * @param {string} [params.shortDescriptionI18n] - Short description translation.
     * @param {string} [params.kind] - Kind of object.
     * @param {PublishObject} [params.publish] - Publish information.
     * @param {State} [params.state] - Offering state.
     * @param {string} [params.catalogId] - The id of the catalog containing this offering.
     * @param {string} [params.catalogName] - The name of the catalog.
     * @param {JsonObject} [params.data] - Map of data values for this object.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.CatalogObject>>}
     */
    CatalogManagementV1.prototype.replaceObject = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'objectIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'id': _params.id,
            'name': _params.name,
            '_rev': _params.rev,
            'crn': _params.crn,
            'url': _params.url,
            'parent_id': _params.parentId,
            'label_i18n': _params.labelI18n,
            'label': _params.label,
            'tags': _params.tags,
            'created': _params.created,
            'updated': _params.updated,
            'short_description': _params.shortDescription,
            'short_description_i18n': _params.shortDescriptionI18n,
            'kind': _params.kind,
            'publish': _params.publish,
            'state': _params.state,
            'catalog_id': _params.catalogId,
            'catalog_name': _params.catalogName,
            'data': _params.data,
        };
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'object_identifier': _params.objectIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'replaceObject');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/objects/{object_identifier}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete catalog object.
     *
     * Delete a specific object within a specific catalog.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.objectIdentifier - Object identifier.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.deleteObject = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'objectIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'object_identifier': _params.objectIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteObject');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/objects/{object_identifier}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get catalog object audit log.
     *
     * Get the audit log associated with a specific catalog object.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.objectIdentifier - Object identifier.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.AuditLog>>}
     */
    CatalogManagementV1.prototype.getObjectAudit = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'objectIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'object_identifier': _params.objectIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getObjectAudit');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/objects/{object_identifier}/audit',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Publish object to account.
     *
     * Publish a catalog object to account.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.objectIdentifier - Object identifier.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.accountPublishObject = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'objectIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'object_identifier': _params.objectIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'accountPublishObject');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/objects/{object_identifier}/account-publish',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Publish object to share with allow list.
     *
     * Publish the specified object so that it is visible to those in the allow list.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.objectIdentifier - Object identifier.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.sharedPublishObject = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'objectIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'object_identifier': _params.objectIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'sharedPublishObject');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/objects/{object_identifier}/shared-publish',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Publish object to share with IBMers.
     *
     * Publish the specified object so that it is visible to IBMers in the public catalog.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.objectIdentifier - Object identifier.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.ibmPublishObject = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'objectIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'object_identifier': _params.objectIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'ibmPublishObject');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/objects/{object_identifier}/ibm-publish',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Publish object to share with all users.
     *
     * Publish the specified object so it is visible to all users in the public catalog.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.objectIdentifier - Object identifier.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.publicPublishObject = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'objectIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'object_identifier': _params.objectIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'publicPublishObject');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/objects/{object_identifier}/public-publish',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Add account ID to object access list.
     *
     * Add an account ID to an object's access list.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.objectIdentifier - Object identifier.
     * @param {string} params.accountIdentifier - Account identifier.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.createObjectAccess = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'objectIdentifier', 'accountIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'object_identifier': _params.objectIdentifier,
            'account_identifier': _params.accountIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'createObjectAccess');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/objects/{object_identifier}/access/{account_identifier}',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Check for account ID in object access list.
     *
     * Determine if an account ID is in an object's access list.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.objectIdentifier - Object identifier.
     * @param {string} params.accountIdentifier - Account identifier.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.ObjectAccess>>}
     */
    CatalogManagementV1.prototype.getObjectAccess = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'objectIdentifier', 'accountIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'object_identifier': _params.objectIdentifier,
            'account_identifier': _params.accountIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getObjectAccess');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/objects/{object_identifier}/access/{account_identifier}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Remove account ID from object access list.
     *
     * Delete the specified account ID from the specified object's access list.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.objectIdentifier - Object identifier.
     * @param {string} params.accountIdentifier - Account identifier.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.deleteObjectAccess = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'objectIdentifier', 'accountIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'object_identifier': _params.objectIdentifier,
            'account_identifier': _params.accountIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteObjectAccess');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/objects/{object_identifier}/access/{account_identifier}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get object access list.
     *
     * Get the access list associated with the specified object.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.objectIdentifier - Object identifier.
     * @param {number} [params.limit] - The maximum number of results to return.
     * @param {number} [params.offset] - The number of results to skip before returning values.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.ObjectAccessListResult>>}
     */
    CatalogManagementV1.prototype.getObjectAccessList = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'objectIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'limit': _params.limit,
            'offset': _params.offset,
        };
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'object_identifier': _params.objectIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getObjectAccessList');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/objects/{object_identifier}/access',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete accounts from object access list.
     *
     * Delete all or a set of accounts from an object's access list.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.objectIdentifier - Object identifier.
     * @param {string[]} params.accounts - A list of accounts to delete.  An entry with star["*"] will remove all
     * accounts.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.AccessListBulkResponse>>}
     */
    CatalogManagementV1.prototype.deleteObjectAccessList = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'objectIdentifier', 'accounts'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = _params.accounts;
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'object_identifier': _params.objectIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteObjectAccessList');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/objects/{object_identifier}/access',
                method: 'DELETE',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Add accounts to object access list.
     *
     * Add one or more accounts to the specified object's access list.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.catalogIdentifier - Catalog identifier.
     * @param {string} params.objectIdentifier - Object identifier.
     * @param {string[]} params.accounts - A list of accounts to add.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.AccessListBulkResponse>>}
     */
    CatalogManagementV1.prototype.addObjectAccessList = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['catalogIdentifier', 'objectIdentifier', 'accounts'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = _params.accounts;
        var path = {
            'catalog_identifier': _params.catalogIdentifier,
            'object_identifier': _params.objectIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'addObjectAccessList');
        var parameters = {
            options: {
                url: '/catalogs/{catalog_identifier}/objects/{object_identifier}/access',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * instances
     ************************/
    /**
     * Create an offering resource instance.
     *
     * Provision a new offering in a given account, and return its resource instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.xAuthRefreshToken - IAM Refresh token.
     * @param {string} [params.id] - provisioned instance ID (part of the CRN).
     * @param {string} [params.rev] - Cloudant revision.
     * @param {string} [params.url] - url reference to this object.
     * @param {string} [params.crn] - platform CRN for this instance.
     * @param {string} [params.label] - the label for this instance.
     * @param {string} [params.catalogId] - Catalog ID this instance was created from.
     * @param {string} [params.offeringId] - Offering ID this instance was created from.
     * @param {string} [params.kindFormat] - the format this instance has (helm, operator, ova...).
     * @param {string} [params.version] - The version this instance was installed from (not version id).
     * @param {string} [params.clusterId] - Cluster ID.
     * @param {string} [params.clusterRegion] - Cluster region (e.g., us-south).
     * @param {string[]} [params.clusterNamespaces] - List of target namespaces to install into.
     * @param {boolean} [params.clusterAllNamespaces] - designate to install into all namespaces.
     * @param {string} [params.schematicsWorkspaceId] - Id of the schematics workspace, for offering instances provisioned
     * through schematics.
     * @param {string} [params.resourceGroupId] - Id of the resource group to provision the offering instance into.
     * @param {string} [params.installPlan] - Type of install plan (also known as approval strategy) for operator
     * subscriptions. Can be either automatic, which automatically upgrades operators to the latest in a channel, or
     * manual, which requires approval on the cluster.
     * @param {string} [params.channel] - Channel to pin the operator subscription to.
     * @param {JsonObject} [params.metadata] - Map of metadata values for this offering instance.
     * @param {OfferingInstanceLastOperation} [params.lastOperation] - the last operation performed and status.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.OfferingInstance>>}
     */
    CatalogManagementV1.prototype.createOfferingInstance = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['xAuthRefreshToken'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'id': _params.id,
            '_rev': _params.rev,
            'url': _params.url,
            'crn': _params.crn,
            'label': _params.label,
            'catalog_id': _params.catalogId,
            'offering_id': _params.offeringId,
            'kind_format': _params.kindFormat,
            'version': _params.version,
            'cluster_id': _params.clusterId,
            'cluster_region': _params.clusterRegion,
            'cluster_namespaces': _params.clusterNamespaces,
            'cluster_all_namespaces': _params.clusterAllNamespaces,
            'schematics_workspace_id': _params.schematicsWorkspaceId,
            'resource_group_id': _params.resourceGroupId,
            'install_plan': _params.installPlan,
            'channel': _params.channel,
            'metadata': _params.metadata,
            'last_operation': _params.lastOperation,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'createOfferingInstance');
        var parameters = {
            options: {
                url: '/instances/offerings',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'X-Auth-Refresh-Token': _params.xAuthRefreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get Offering Instance.
     *
     * Get the resource associated with an installed offering instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceIdentifier - Version Instance identifier.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.OfferingInstance>>}
     */
    CatalogManagementV1.prototype.getOfferingInstance = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['instanceIdentifier'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'instance_identifier': _params.instanceIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getOfferingInstance');
        var parameters = {
            options: {
                url: '/instances/offerings/{instance_identifier}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update Offering Instance.
     *
     * Update an installed offering instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceIdentifier - Version Instance identifier.
     * @param {string} params.xAuthRefreshToken - IAM Refresh token.
     * @param {string} [params.id] - provisioned instance ID (part of the CRN).
     * @param {string} [params.rev] - Cloudant revision.
     * @param {string} [params.url] - url reference to this object.
     * @param {string} [params.crn] - platform CRN for this instance.
     * @param {string} [params.label] - the label for this instance.
     * @param {string} [params.catalogId] - Catalog ID this instance was created from.
     * @param {string} [params.offeringId] - Offering ID this instance was created from.
     * @param {string} [params.kindFormat] - the format this instance has (helm, operator, ova...).
     * @param {string} [params.version] - The version this instance was installed from (not version id).
     * @param {string} [params.clusterId] - Cluster ID.
     * @param {string} [params.clusterRegion] - Cluster region (e.g., us-south).
     * @param {string[]} [params.clusterNamespaces] - List of target namespaces to install into.
     * @param {boolean} [params.clusterAllNamespaces] - designate to install into all namespaces.
     * @param {string} [params.schematicsWorkspaceId] - Id of the schematics workspace, for offering instances provisioned
     * through schematics.
     * @param {string} [params.resourceGroupId] - Id of the resource group to provision the offering instance into.
     * @param {string} [params.installPlan] - Type of install plan (also known as approval strategy) for operator
     * subscriptions. Can be either automatic, which automatically upgrades operators to the latest in a channel, or
     * manual, which requires approval on the cluster.
     * @param {string} [params.channel] - Channel to pin the operator subscription to.
     * @param {JsonObject} [params.metadata] - Map of metadata values for this offering instance.
     * @param {OfferingInstanceLastOperation} [params.lastOperation] - the last operation performed and status.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.OfferingInstance>>}
     */
    CatalogManagementV1.prototype.putOfferingInstance = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['instanceIdentifier', 'xAuthRefreshToken'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'id': _params.id,
            '_rev': _params.rev,
            'url': _params.url,
            'crn': _params.crn,
            'label': _params.label,
            'catalog_id': _params.catalogId,
            'offering_id': _params.offeringId,
            'kind_format': _params.kindFormat,
            'version': _params.version,
            'cluster_id': _params.clusterId,
            'cluster_region': _params.clusterRegion,
            'cluster_namespaces': _params.clusterNamespaces,
            'cluster_all_namespaces': _params.clusterAllNamespaces,
            'schematics_workspace_id': _params.schematicsWorkspaceId,
            'resource_group_id': _params.resourceGroupId,
            'install_plan': _params.installPlan,
            'channel': _params.channel,
            'metadata': _params.metadata,
            'last_operation': _params.lastOperation,
        };
        var path = {
            'instance_identifier': _params.instanceIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'putOfferingInstance');
        var parameters = {
            options: {
                url: '/instances/offerings/{instance_identifier}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'X-Auth-Refresh-Token': _params.xAuthRefreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a version instance.
     *
     * Delete and instance deployed out of a product version.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.instanceIdentifier - Version Instance identifier.
     * @param {string} params.xAuthRefreshToken - IAM Refresh token.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CatalogManagementV1.Response<CatalogManagementV1.Empty>>}
     */
    CatalogManagementV1.prototype.deleteOfferingInstance = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['instanceIdentifier', 'xAuthRefreshToken'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'instance_identifier': _params.instanceIdentifier,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(CatalogManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteOfferingInstance');
        var parameters = {
            options: {
                url: '/instances/offerings/{instance_identifier}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'X-Auth-Refresh-Token': _params.xAuthRefreshToken,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    CatalogManagementV1.DEFAULT_SERVICE_URL = 'https://cm.globalcatalog.cloud.ibm.com/api/v1-beta';
    CatalogManagementV1.DEFAULT_SERVICE_NAME = 'catalog_management';
    return CatalogManagementV1;
}(ibm_cloud_sdk_core_1.BaseService));
/*************************
 * interfaces
 ************************/
(function (CatalogManagementV1) {
    /** Constants for the `getConsumptionOfferings` operation. */
    var GetConsumptionOfferingsConstants;
    (function (GetConsumptionOfferingsConstants) {
        /** What should be selected. Default is 'all' which will return both public and private offerings. 'public' returns only the public offerings and 'private' returns only the private offerings. */
        var Select;
        (function (Select) {
            Select["ALL"] = "all";
            Select["PUBLIC"] = "public";
            Select["PRIVATE"] = "private";
        })(Select = GetConsumptionOfferingsConstants.Select || (GetConsumptionOfferingsConstants.Select = {}));
    })(GetConsumptionOfferingsConstants = CatalogManagementV1.GetConsumptionOfferingsConstants || (CatalogManagementV1.GetConsumptionOfferingsConstants = {}));
    /** Constants for the `updateOfferingIbm` operation. */
    var UpdateOfferingIbmConstants;
    (function (UpdateOfferingIbmConstants) {
        /** Type of approval, ibm or public. */
        var ApprovalType;
        (function (ApprovalType) {
            ApprovalType["PC_MANAGED"] = "pc_managed";
            ApprovalType["ALLOW_REQUEST"] = "allow_request";
            ApprovalType["IBM"] = "ibm";
            ApprovalType["PUBLIC"] = "public";
        })(ApprovalType = UpdateOfferingIbmConstants.ApprovalType || (UpdateOfferingIbmConstants.ApprovalType = {}));
        /** Approve (true) or disapprove (false). */
        var Approved;
        (function (Approved) {
            Approved["TRUE"] = "true";
            Approved["FALSE"] = "false";
        })(Approved = UpdateOfferingIbmConstants.Approved || (UpdateOfferingIbmConstants.Approved = {}));
    })(UpdateOfferingIbmConstants = CatalogManagementV1.UpdateOfferingIbmConstants || (CatalogManagementV1.UpdateOfferingIbmConstants = {}));
    /** Constants for the `deprecateOffering` operation. */
    var DeprecateOfferingConstants;
    (function (DeprecateOfferingConstants) {
        /** Set deprecation (true) or cancel deprecation (false). */
        var Setting;
        (function (Setting) {
            Setting["TRUE"] = "true";
            Setting["FALSE"] = "false";
        })(Setting = DeprecateOfferingConstants.Setting || (DeprecateOfferingConstants.Setting = {}));
    })(DeprecateOfferingConstants = CatalogManagementV1.DeprecateOfferingConstants || (CatalogManagementV1.DeprecateOfferingConstants = {}));
    /** Constants for the `getOfferingSource` operation. */
    var GetOfferingSourceConstants;
    (function (GetOfferingSourceConstants) {
        /** The type of the response: application/yaml, application/json, or application/x-gzip. */
        var Accept;
        (function (Accept) {
            Accept["APPLICATION_YAML"] = "application/yaml";
            Accept["APPLICATION_JSON"] = "application/json";
            Accept["APPLICATION_X_GZIP"] = "application/x-gzip";
        })(Accept = GetOfferingSourceConstants.Accept || (GetOfferingSourceConstants.Accept = {}));
    })(GetOfferingSourceConstants = CatalogManagementV1.GetOfferingSourceConstants || (CatalogManagementV1.GetOfferingSourceConstants = {}));
    /** Constants for the `setDeprecateVersion` operation. */
    var SetDeprecateVersionConstants;
    (function (SetDeprecateVersionConstants) {
        /** Set deprecation (true) or cancel deprecation (false). */
        var Setting;
        (function (Setting) {
            Setting["TRUE"] = "true";
            Setting["FALSE"] = "false";
        })(Setting = SetDeprecateVersionConstants.Setting || (SetDeprecateVersionConstants.Setting = {}));
    })(SetDeprecateVersionConstants = CatalogManagementV1.SetDeprecateVersionConstants || (CatalogManagementV1.SetDeprecateVersionConstants = {}));
})(CatalogManagementV1 || (CatalogManagementV1 = {}));
module.exports = CatalogManagementV1;
//# sourceMappingURL=v1.js.map
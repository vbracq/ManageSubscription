"use strict";
/**
 * (C) Copyright IBM Corp. 2023.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * IBM OpenAPI SDK Code Generator Version: 3.81.0-c73a091c-20231026-215706
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * IAM Policy Management API
 *
 * API Version: 1.0.1
 */
var IamPolicyManagementV1 = /** @class */ (function (_super) {
    __extends(IamPolicyManagementV1, _super);
    /**
     * Construct a IamPolicyManagementV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {IamPolicyManagementV1}
     */
    function IamPolicyManagementV1(options) {
        var _this = this;
        options = options || {};
        _this = _super.call(this, options) || this;
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        else {
            _this.setServiceUrl(IamPolicyManagementV1.DEFAULT_SERVICE_URL);
        }
        return _this;
    }
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of IamPolicyManagementV1 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {IamPolicyManagementV1}
     */
    IamPolicyManagementV1.newInstance = function (options) {
        options = options || {};
        if (!options.serviceName) {
            options.serviceName = this.DEFAULT_SERVICE_NAME;
        }
        if (!options.authenticator) {
            options.authenticator = (0, ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment)(options.serviceName);
        }
        var service = new IamPolicyManagementV1(options);
        service.configureService(options.serviceName);
        if (options.serviceUrl) {
            service.setServiceUrl(options.serviceUrl);
        }
        return service;
    };
    /*************************
     * policies
     ************************/
    /**
     * Get policies by attributes.
     *
     * Get policies and filter by attributes. While managing policies, you might want to retrieve policies in the account
     * and filter by attribute values. This can be done through query parameters. The following attributes are supported:
     * account_id, iam_id, access_group_id, type, service_type, sort, format and state. account_id is a required query
     * parameter. Only policies that have the specified attributes and that the caller has read access to are returned. If
     * the caller does not have read access to any policies an empty array is returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - The account GUID that the policies belong to.
     * @param {string} [params.acceptLanguage] - Language code for translations
     * * `default` - English
     * * `de` -  German (Standard)
     * * `en` - English
     * * `es` - Spanish (Spain)
     * * `fr` - French (Standard)
     * * `it` - Italian (Standard)
     * * `ja` - Japanese
     * * `ko` - Korean
     * * `pt-br` - Portuguese (Brazil)
     * * `zh-cn` - Chinese (Simplified, PRC)
     * * `zh-tw` - (Chinese, Taiwan).
     * @param {string} [params.iamId] - Optional IAM ID used to identify the subject.
     * @param {string} [params.accessGroupId] - Optional access group id.
     * @param {string} [params.type] - Optional type of policy.
     * @param {string} [params.serviceType] - Optional type of service.
     * @param {string} [params.tagName] - Optional name of the access tag in the policy.
     * @param {string} [params.tagValue] - Optional value of the access tag in the policy.
     * @param {string} [params.sort] - Optional top level policy field to sort results. Ascending sort is default.
     * Descending sort available by prepending '-' to field. Example '-last_modified_at'.
     * @param {string} [params.format] - Include additional data per policy returned
     * * `include_last_permit` - returns details of when the policy last granted a permit decision and the number of times
     * it has done so
     * * `display` - returns the list of all actions included in each of the policy roles.
     * @param {string} [params.state] - The state of the policy.
     * * `active` - returns active policies
     * * `deleted` - returns non-active policies.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.PolicyCollection>>}
     */
    IamPolicyManagementV1.prototype.listPolicies = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['accountId'];
        var _validParams = [
            'accountId',
            'acceptLanguage',
            'iamId',
            'accessGroupId',
            'type',
            'serviceType',
            'tagName',
            'tagValue',
            'sort',
            'format',
            'state',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'account_id': _params.accountId,
            'iam_id': _params.iamId,
            'access_group_id': _params.accessGroupId,
            'type': _params.type,
            'service_type': _params.serviceType,
            'tag_name': _params.tagName,
            'tag_value': _params.tagValue,
            'sort': _params.sort,
            'format': _params.format,
            'state': _params.state,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'listPolicies');
        var parameters = {
            options: {
                url: '/v1/policies',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Accept-Language': _params.acceptLanguage,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create a policy.
     *
     * Creates a policy to grant access between a subject and a resource. There are two types of policies: **access** and
     * **authorization**. A policy administrator might want to create an access policy which grants access to a user,
     * service-id, or an access group. They might also want to create an authorization policy and setup access between
     * services.
     *
     * ### Access
     *
     * To create an access policy, use **`"type": "access"`** in the body. The possible subject attributes are
     * **`iam_id`** and **`access_group_id`**. Use the **`iam_id`** subject attribute for assigning access for a user or
     * service-id. Use the **`access_group_id`** subject attribute for assigning access for an access group. Assign roles
     * that are supported by the service or platform roles. For more information, see [IAM roles and
     * actions](/docs/account?topic=account-iam-service-roles-actions). Use only the resource attributes supported by the
     * service. To view a service's or the platform's supported attributes, check the [documentation](/docs?tab=all-docs).
     * The policy resource must include either the **`serviceType`**, **`serviceName`**, **`resourceGroupId`** or
     * **`service_group_id`** attribute and the **`accountId`** attribute. The IAM Services group (`IAM`) is a subset of
     * account management services that includes the IAM platform services IAM Identity, IAM Access Management, IAM Users
     * Management, IAM Groups, and future IAM services. If the subject is a locked service-id, the request will fail.
     *
     * ### Authorization
     *
     * Authorization policies are supported by services on a case by case basis. Refer to service documentation to verify
     * their support of authorization policies. To create an authorization policy, use **`"type": "authorization"`** in
     * the body. The subject attributes must match the supported authorization subjects of the resource. Multiple subject
     * attributes might be provided. The following attributes are supported:
     *   serviceName, serviceInstance, region, resourceType, resource, accountId, resourceGroupId Assign roles that are
     * supported by the service or platform roles. For more information, see [IAM roles and
     * actions](/docs/account?topic=account-iam-service-roles-actions). The user must also have the same level of access
     * or greater to the target resource in order to grant the role. Use only the resource attributes supported by the
     * service. To view a service's or the platform's supported attributes, check the [documentation](/docs?tab=all-docs).
     * Both the policy subject and the policy resource must include the **`accountId`** attributes. The policy subject
     * must include either **`serviceName`** or **`resourceGroupId`** (or both) attributes.
     *
     * ### Attribute Operators
     *
     * Currently, only the `stringEquals` and the `stringMatch` operators are available. Resource attributes may support
     * one or both operators. For more information, see [Assigning access by using wildcard
     * policies](https://cloud.ibm.com/docs/account?topic=account-wildcard).
     *
     * ### Attribute Validations
     *
     * Policy attribute values must be between 1 and 1,000 characters in length. If location related attributes like
     * geography, country, metro, region, satellite, and locationvalues are supported by the service, they are validated
     * against Global Catalog locations.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.type - The policy type; either 'access' or 'authorization'.
     * @param {PolicySubject[]} params.subjects - The subjects associated with a policy.
     * @param {PolicyRole[]} params.roles - A set of role cloud resource names (CRNs) granted by the policy.
     * @param {PolicyResource[]} params.resources - The resources associated with a policy.
     * @param {string} [params.description] - Customer-defined description.
     * @param {string} [params.acceptLanguage] - Language code for translations
     * * `default` - English
     * * `de` -  German (Standard)
     * * `en` - English
     * * `es` - Spanish (Spain)
     * * `fr` - French (Standard)
     * * `it` - Italian (Standard)
     * * `ja` - Japanese
     * * `ko` - Korean
     * * `pt-br` - Portuguese (Brazil)
     * * `zh-cn` - Chinese (Simplified, PRC)
     * * `zh-tw` - (Chinese, Taiwan).
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.Policy>>}
     */
    IamPolicyManagementV1.prototype.createPolicy = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['type', 'subjects', 'roles', 'resources'];
        var _validParams = [
            'type',
            'subjects',
            'roles',
            'resources',
            'description',
            'acceptLanguage',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'type': _params.type,
            'subjects': _params.subjects,
            'roles': _params.roles,
            'resources': _params.resources,
            'description': _params.description,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'createPolicy');
        var parameters = {
            options: {
                url: '/v1/policies',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Accept-Language': _params.acceptLanguage,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update a policy.
     *
     * Update a policy to grant access between a subject and a resource. A policy administrator might want to update an
     * existing policy. The policy type cannot be changed (You cannot change an access policy to an authorization policy).
     *
     * ### Access
     *
     * To update an access policy, use **`"type": "access"`** in the body. The possible subject attributes are
     * **`iam_id`** and **`access_group_id`**. Use the **`iam_id`** subject attribute for assigning access for a user or
     * service-id. Use the **`access_group_id`** subject attribute for assigning access for an access group. Assign roles
     * that are supported by the service or platform roles. For more information, see [IAM roles and
     * actions](/docs/account?topic=account-iam-service-roles-actions). Use only the resource attributes supported by the
     * service. To view a service's or the platform's supported attributes, check the [documentation](/docs?tab=all-docs).
     * The policy resource must include either the **`serviceType`**, **`serviceName`**,  or **`resourceGroupId`**
     * attribute and the **`accountId`** attribute.` If the subject is a locked service-id, the request will fail.
     *
     * ### Authorization
     *
     * To update an authorization policy, use **`"type": "authorization"`** in the body. The subject attributes must match
     * the supported authorization subjects of the resource. Multiple subject attributes might be provided. The following
     * attributes are supported:
     *   serviceName, serviceInstance, region, resourceType, resource, accountId, resourceGroupId Assign roles that are
     * supported by the service or platform roles. For more information, see [IAM roles and
     * actions](/docs/account?topic=account-iam-service-roles-actions). The user must also have the same level of access
     * or greater to the target resource in order to grant the role. Use only the resource attributes supported by the
     * service. To view a service's or the platform's supported attributes, check the [documentation](/docs?tab=all-docs).
     * Both the policy subject and the policy resource must include the **`accountId`** attributes. The policy subject
     * must include either **`serviceName`** or **`resourceGroupId`** (or both) attributes.
     *
     * ### Attribute Operators
     *
     * Currently, only the `stringEquals` and the `stringMatch` operators are available. Resource attributes might support
     * one or both operators. For more information, see [Assigning access by using wildcard
     * policies](https://cloud.ibm.com/docs/account?topic=account-wildcard).
     *
     * ### Attribute Validations
     *
     * Policy attribute values must be between 1 and 1,000 characters in length. If location related attributes like
     * geography, country, metro, region, satellite, and locationvalues are supported by the service, they are validated
     * against Global Catalog locations.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.policyId - The policy ID.
     * @param {string} params.ifMatch - The revision number for updating a policy and must match the ETag value of the
     * existing policy. The Etag can be retrieved using the GET /v1/policies/{policy_id} API and looking at the ETag
     * response header.
     * @param {string} params.type - The policy type; either 'access' or 'authorization'.
     * @param {PolicySubject[]} params.subjects - The subjects associated with a policy.
     * @param {PolicyRole[]} params.roles - A set of role cloud resource names (CRNs) granted by the policy.
     * @param {PolicyResource[]} params.resources - The resources associated with a policy.
     * @param {string} [params.description] - Customer-defined description.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.Policy>>}
     */
    IamPolicyManagementV1.prototype.replacePolicy = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['policyId', 'ifMatch', 'type', 'subjects', 'roles', 'resources'];
        var _validParams = [
            'policyId',
            'ifMatch',
            'type',
            'subjects',
            'roles',
            'resources',
            'description',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'type': _params.type,
            'subjects': _params.subjects,
            'roles': _params.roles,
            'resources': _params.resources,
            'description': _params.description,
        };
        var path = {
            'policy_id': _params.policyId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'replacePolicy');
        var parameters = {
            options: {
                url: '/v1/policies/{policy_id}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Retrieve a policy by ID.
     *
     * Retrieve a policy by providing a policy ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.policyId - The policy ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.PolicyTemplateMetaData>>}
     */
    IamPolicyManagementV1.prototype.getPolicy = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['policyId'];
        var _validParams = ['policyId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'policy_id': _params.policyId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getPolicy');
        var parameters = {
            options: {
                url: '/v1/policies/{policy_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a policy by ID.
     *
     * Delete a policy by providing a policy ID. A policy cannot be deleted if the subject ID contains a locked service
     * ID. If the subject of the policy is a locked service-id, the request will fail.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.policyId - The policy ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.EmptyObject>>}
     */
    IamPolicyManagementV1.prototype.deletePolicy = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['policyId'];
        var _validParams = ['policyId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'policy_id': _params.policyId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'deletePolicy');
        var parameters = {
            options: {
                url: '/v1/policies/{policy_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Restore a deleted policy by ID.
     *
     * Restore a policy that has recently been deleted. A policy administrator might want to restore a deleted policy. To
     * restore a policy, use **`"state": "active"`** in the body.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.policyId - The policy ID.
     * @param {string} params.ifMatch - The revision number for updating a policy and must match the ETag value of the
     * existing policy. The Etag can be retrieved using the GET /v1/policies/{policy_id} API and looking at the ETag
     * response header.
     * @param {string} [params.state] - The policy state.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.Policy>>}
     */
    IamPolicyManagementV1.prototype.updatePolicyState = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['policyId', 'ifMatch'];
        var _validParams = ['policyId', 'ifMatch', 'state', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'state': _params.state,
        };
        var path = {
            'policy_id': _params.policyId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'updatePolicyState');
        var parameters = {
            options: {
                url: '/v1/policies/{policy_id}',
                method: 'PATCH',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * roles
     ************************/
    /**
     * Get roles by filters.
     *
     * Get roles based on the filters. While managing roles, you may want to retrieve roles and filter by usages. This can
     * be done through query parameters. Currently, we only support the following attributes: account_id, service_name,
     * service_group_id, source_service_name and policy_type. Both service_name and service_group_id attributes are
     * mutually exclusive. Only roles that match the filter and that the caller has read access to are returned. If the
     * caller does not have read access to any roles an empty array is returned.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.acceptLanguage] - Language code for translations
     * * `default` - English
     * * `de` -  German (Standard)
     * * `en` - English
     * * `es` - Spanish (Spain)
     * * `fr` - French (Standard)
     * * `it` - Italian (Standard)
     * * `ja` - Japanese
     * * `ko` - Korean
     * * `pt-br` - Portuguese (Brazil)
     * * `zh-cn` - Chinese (Simplified, PRC)
     * * `zh-tw` - (Chinese, Taiwan).
     * @param {string} [params.accountId] - Optional account GUID in which the roles belong to.
     * @param {string} [params.serviceName] - Optional name of IAM enabled service.
     * @param {string} [params.sourceServiceName] - Optional name of source IAM enabled service.
     * @param {string} [params.policyType] - Optional Policy Type.
     * @param {string} [params.serviceGroupId] - Optional id of service group.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.RoleCollection>>}
     */
    IamPolicyManagementV1.prototype.listRoles = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = [];
        var _validParams = [
            'acceptLanguage',
            'accountId',
            'serviceName',
            'sourceServiceName',
            'policyType',
            'serviceGroupId',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'account_id': _params.accountId,
            'service_name': _params.serviceName,
            'source_service_name': _params.sourceServiceName,
            'policy_type': _params.policyType,
            'service_group_id': _params.serviceGroupId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'listRoles');
        var parameters = {
            options: {
                url: '/v2/roles',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Accept-Language': _params.acceptLanguage,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create a role.
     *
     * Creates a custom role for a specific service within the account. An account owner or a user assigned the
     * Administrator role on the Role management service can create a custom role. Any number of actions for a single
     * service can be mapped to the new role, but there must be at least one service-defined action to successfully create
     * the new role.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.displayName - The display name of the role that is shown in the console.
     * @param {string[]} params.actions - The actions of the role. For more information, see [IAM roles and
     * actions](https://cloud.ibm.com/docs/account?topic=account-iam-service-roles-actions).
     * @param {string} params.name - The name of the role that is used in the CRN. Can only be alphanumeric and has to be
     * capitalized.
     * @param {string} params.accountId - The account GUID.
     * @param {string} params.serviceName - The service name.
     * @param {string} [params.description] - The description of the role.
     * @param {string} [params.acceptLanguage] - Language code for translations
     * * `default` - English
     * * `de` -  German (Standard)
     * * `en` - English
     * * `es` - Spanish (Spain)
     * * `fr` - French (Standard)
     * * `it` - Italian (Standard)
     * * `ja` - Japanese
     * * `ko` - Korean
     * * `pt-br` - Portuguese (Brazil)
     * * `zh-cn` - Chinese (Simplified, PRC)
     * * `zh-tw` - (Chinese, Taiwan).
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.CustomRole>>}
     */
    IamPolicyManagementV1.prototype.createRole = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['displayName', 'actions', 'name', 'accountId', 'serviceName'];
        var _validParams = [
            'displayName',
            'actions',
            'name',
            'accountId',
            'serviceName',
            'description',
            'acceptLanguage',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'display_name': _params.displayName,
            'actions': _params.actions,
            'name': _params.name,
            'account_id': _params.accountId,
            'service_name': _params.serviceName,
            'description': _params.description,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'createRole');
        var parameters = {
            options: {
                url: '/v2/roles',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Accept-Language': _params.acceptLanguage,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update a role.
     *
     * Update a custom role. A role administrator might want to update an existing role by updating the display name,
     * description, or the actions that are mapped to the role. The name, account_id, and service_name can't be changed.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.roleId - The role ID.
     * @param {string} params.ifMatch - The revision number for updating a role and must match the ETag value of the
     * existing role. The Etag can be retrieved using the GET /v2/roles/{role_id} API and looking at the ETag response
     * header.
     * @param {string} params.displayName - The display name of the role that is shown in the console.
     * @param {string[]} params.actions - The actions of the role. For more information, see [IAM roles and
     * actions](https://cloud.ibm.com/docs/account?topic=account-iam-service-roles-actions).
     * @param {string} [params.description] - The description of the role.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.CustomRole>>}
     */
    IamPolicyManagementV1.prototype.replaceRole = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['roleId', 'ifMatch', 'displayName', 'actions'];
        var _validParams = ['roleId', 'ifMatch', 'displayName', 'actions', 'description', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'display_name': _params.displayName,
            'actions': _params.actions,
            'description': _params.description,
        };
        var path = {
            'role_id': _params.roleId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'replaceRole');
        var parameters = {
            options: {
                url: '/v2/roles/{role_id}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Retrieve a role by ID.
     *
     * Retrieve a role by providing a role ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.roleId - The role ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.CustomRole>>}
     */
    IamPolicyManagementV1.prototype.getRole = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['roleId'];
        var _validParams = ['roleId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'role_id': _params.roleId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getRole');
        var parameters = {
            options: {
                url: '/v2/roles/{role_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a role by ID.
     *
     * Delete a role by providing a role ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.roleId - The role ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.EmptyObject>>}
     */
    IamPolicyManagementV1.prototype.deleteRole = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['roleId'];
        var _validParams = ['roleId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'role_id': _params.roleId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteRole');
        var parameters = {
            options: {
                url: '/v2/roles/{role_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * v2Policies
     ************************/
    /**
     * Get policies by attributes.
     *
     * Get policies and filter by attributes. While managing policies, you might want to retrieve policies in the account
     * and filter by attribute values. This can be done through query parameters. The following attributes are supported:
     * account_id, iam_id, access_group_id, type, service_type, sort, format and state. account_id is a required query
     * parameter. Only policies that have the specified attributes and that the caller has read access to are returned. If
     * the caller does not have read access to any policies an empty array is returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - The account GUID in which the policies belong to.
     * @param {string} [params.acceptLanguage] - Language code for translations
     * * `default` - English
     * * `de` -  German (Standard)
     * * `en` - English
     * * `es` - Spanish (Spain)
     * * `fr` - French (Standard)
     * * `it` - Italian (Standard)
     * * `ja` - Japanese
     * * `ko` - Korean
     * * `pt-br` - Portuguese (Brazil)
     * * `zh-cn` - Chinese (Simplified, PRC)
     * * `zh-tw` - (Chinese, Taiwan).
     * @param {string} [params.iamId] - Optional IAM ID used to identify the subject.
     * @param {string} [params.accessGroupId] - Optional access group id.
     * @param {string} [params.type] - Optional type of policy.
     * @param {string} [params.serviceType] - Optional type of service.
     * @param {string} [params.serviceName] - Optional name of service.
     * @param {string} [params.serviceGroupId] - Optional ID of service group.
     * @param {string} [params.sort] - Optional top level policy field to sort results. Ascending sort is default.
     * Descending sort available by prepending '-' to field, for example, '-last_modified_at'. Note that last permit
     * information is only included when 'format=include_last_permit', for example,
     * "format=include_last_permit&sort=last_permit_at" Example fields that can be sorted on:
     *   - 'id'
     *   - 'type'
     *   - 'href'
     *   - 'created_at'
     *   - 'created_by_id'
     *   - 'last_modified_at'
     *   - 'last_modified_by_id'
     *   - 'state'
     *   - 'last_permit_at'
     *   - 'last_permit_frequency'.
     * @param {string} [params.format] - Include additional data per policy returned
     * * `include_last_permit` - returns details of when the policy last granted a permit decision and the number of times
     * it has done so
     * * `display` - returns the list of all actions included in each of the policy roles and translations for all
     * relevant fields.
     * @param {string} [params.state] - The state of the policy.
     * * `active` - returns active policies
     * * `deleted` - returns non-active policies.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.V2PolicyCollection>>}
     */
    IamPolicyManagementV1.prototype.listV2Policies = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['accountId'];
        var _validParams = [
            'accountId',
            'acceptLanguage',
            'iamId',
            'accessGroupId',
            'type',
            'serviceType',
            'serviceName',
            'serviceGroupId',
            'sort',
            'format',
            'state',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'account_id': _params.accountId,
            'iam_id': _params.iamId,
            'access_group_id': _params.accessGroupId,
            'type': _params.type,
            'service_type': _params.serviceType,
            'service_name': _params.serviceName,
            'service_group_id': _params.serviceGroupId,
            'sort': _params.sort,
            'format': _params.format,
            'state': _params.state,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'listV2Policies');
        var parameters = {
            options: {
                url: '/v2/policies',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Accept-Language': _params.acceptLanguage,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create a policy.
     *
     * Creates a policy to grant access between a subject and a resource. Currently, there is one type of a v2/policy:
     * **access**. A policy administrator might want to create an access policy that grants access to a user, service-id,
     * or an access group.
     *
     * ### Access
     *
     * To create an access policy, use **`"type": "access"`** in the body. The supported subject attributes are
     * **`iam_id`** and **`access_group_id`**. Use the **`iam_id`** subject attribute to assign access to a user or
     * service-id. Use the **`access_group_id`** subject attribute to assign access to an access group. Assign roles that
     * are supported by the service or platform roles. For more information, see [IAM roles and
     * actions](/docs/account?topic=account-iam-service-roles-actions). Use only the resource attributes supported by the
     * service. To view a service's or the platform's supported attributes, check the [documentation](/docs?tab=all-docs).
     * The policy resource must include either the **`serviceType`**, **`serviceName`**, **`resourceGroupId`** or
     * **`service_group_id`** attribute and the **`accountId`** attribute. In the rule field, you can specify a single
     * condition by using **`key`**, **`value`**, and condition **`operator`**, or a set of **`conditions`** with a
     * combination **`operator`**. The possible combination operators are **`and`** and **`or`**. Combine conditions to
     * specify a time-based restriction (e.g., access only during business hours, during the Monday-Friday work week). For
     * example, a policy can grant access Monday-Friday, 9:00am-5:00pm using the following rule:
     * ```json
     *   "rule": {
     *     "operator": "and",
     *     "conditions": [{
     *       "key": "{{environment.attributes.day_of_week}}",
     *       "operator": "dayOfWeekAnyOf",
     *       "value": ["1+00:00", "2+00:00", "3+00:00", "4+00:00", "5+00:00"]
     *     },
     *       "key": "{{environment.attributes.current_time}}",
     *       "operator": "timeGreaterThanOrEquals",
     *       "value": "09:00:00+00:00"
     *     },
     *       "key": "{{environment.attributes.current_time}}",
     *       "operator": "timeLessThanOrEquals",
     *       "value": "17:00:00+00:00"
     *     }]
     *   }
     * ``` You can use the following operators in the **`key`** and **`value`** pair:
     * ```
     *   'timeLessThan', 'timeLessThanOrEquals', 'timeGreaterThan', 'timeGreaterThanOrEquals',
     *   'dateTimeLessThan', 'dateTimeLessThanOrEquals', 'dateTimeGreaterThan', 'dateTimeGreaterThanOrEquals',
     *   'dayOfWeekEquals', 'dayOfWeekAnyOf',
     * ```
     *
     * The pattern field that matches the rule is required when rule is provided. For the business hour rule example
     * above, the **`pattern`** is **`"time-based-conditions:weekly"`**. For more information, see [Time-based conditions
     * operators](https://cloud.ibm.com/docs/account?topic=account-iam-condition-properties&interface=ui#policy-condition-properties)
     * and
     * [Limiting access with time-based
     * conditions](https://cloud.ibm.com/docs/account?topic=account-iam-time-based&interface=ui). If the subject is a
     * locked service-id, the request will fail.
     *
     * ### Authorization
     *
     * Authorization policies are supported by services on a case by case basis. Refer to service documentation to verify
     * their support of authorization policies. To create an authorization policy, use **`"type": "authorization"`** in
     * the body. The subject attributes must match the supported authorization subjects of the resource. Multiple subject
     * attributes might be provided. The following attributes are supported:
     *   serviceName, serviceInstance, region, resourceType, resource, accountId, resourceGroupId Assign roles that are
     * supported by the service or platform roles. For more information, see [IAM roles and
     * actions](/docs/account?topic=account-iam-service-roles-actions). The user must also have the same level of access
     * or greater to the target resource in order to grant the role. Use only the resource attributes supported by the
     * service. To view a service's or the platform's supported attributes, check the [documentation](/docs?tab=all-docs).
     * Both the policy subject and the policy resource must include the **`accountId`** attributes. The policy subject
     * must include either **`serviceName`** or **`resourceGroupId`** (or both) attributes.
     *
     * ### Attribute Operators
     *
     * Currently, only the `stringEquals`, `stringMatch`, and `stringEquals` operators are available. For more
     * information, see [Assigning access by using wildcard
     * policies](https://cloud.ibm.com/docs/account?topic=account-wildcard).
     *
     * ### Attribute Validations
     *
     * Policy attribute values must be between 1 and 1,000 characters in length. If location related attributes like
     * geography, country, metro, region, satellite, and locationvalues are supported by the service, they are validated
     * against Global Catalog locations.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {Control} params.control - Specifies the type of access granted by the policy.
     * @param {string} params.type - The policy type; either 'access' or 'authorization'.
     * @param {string} [params.description] - Description of the policy.
     * @param {V2PolicySubject} [params.subject] - The subject attributes for whom the policy grants access.
     * @param {V2PolicyResource} [params.resource] - The resource attributes to which the policy grants access.
     * @param {string} [params.pattern] - Indicates pattern of rule, either 'time-based-conditions:once',
     * 'time-based-conditions:weekly:all-day', or 'time-based-conditions:weekly:custom-hours'.
     * @param {V2PolicyRule} [params.rule] - Additional access conditions associated with the policy.
     * @param {string} [params.acceptLanguage] - Language code for translations
     * * `default` - English
     * * `de` -  German (Standard)
     * * `en` - English
     * * `es` - Spanish (Spain)
     * * `fr` - French (Standard)
     * * `it` - Italian (Standard)
     * * `ja` - Japanese
     * * `ko` - Korean
     * * `pt-br` - Portuguese (Brazil)
     * * `zh-cn` - Chinese (Simplified, PRC)
     * * `zh-tw` - (Chinese, Taiwan).
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.V2Policy>>}
     */
    IamPolicyManagementV1.prototype.createV2Policy = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['control', 'type'];
        var _validParams = [
            'control',
            'type',
            'description',
            'subject',
            'resource',
            'pattern',
            'rule',
            'acceptLanguage',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'control': _params.control,
            'type': _params.type,
            'description': _params.description,
            'subject': _params.subject,
            'resource': _params.resource,
            'pattern': _params.pattern,
            'rule': _params.rule,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'createV2Policy');
        var parameters = {
            options: {
                url: '/v2/policies',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Accept-Language': _params.acceptLanguage,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update a policy.
     *
     * Update a policy to grant access between a subject and a resource. A policy administrator might want to update an
     * existing policy.
     *
     * ### Access
     *
     * To update an access policy, use **`"type": "access"`** in the body. The supported subject attributes are
     * **`iam_id`** and **`access_group_id`**. Use the **`iam_id`** subject attribute to assign access to a user or
     * service-id. Use the **`access_group_id`** subject attribute to assign access to an access group. Assign roles that
     * are supported by the service or platform roles. For more information, see [IAM roles and
     * actions](/docs/account?topic=account-iam-service-roles-actions). Use only the resource attributes supported by the
     * service. To view a service's or the platform's supported attributes, check the [documentation](/docs?tab=all-docs).
     * The policy resource must include either the **`serviceType`**, **`serviceName`**, **`resourceGroupId`** or
     * **`service_group_id`** attribute and the **`accountId`** attribute. In the rule field, you can specify a single
     * condition by using **`key`**, **`value`**, and condition **`operator`**, or a set of **`conditions`** with a
     * combination **`operator`**. The possible combination operators are **`and`** and **`or`**. Combine conditions to
     * specify a time-based restriction (e.g., access only during business hours, during the Monday-Friday work week). For
     * example, a policy can grant access Monday-Friday, 9:00am-5:00pm using the following rule:
     * ```json
     *   "rule": {
     *     "operator": "and",
     *     "conditions": [{
     *       "key": "{{environment.attributes.day_of_week}}",
     *       "operator": "dayOfWeekAnyOf",
     *       "value": ["1+00:00", "2+00:00", "3+00:00", "4+00:00", "5+00:00"]
     *     },
     *       "key": "{{environment.attributes.current_time}}",
     *       "operator": "timeGreaterThanOrEquals",
     *       "value": "09:00:00+00:00"
     *     },
     *       "key": "{{environment.attributes.current_time}}",
     *       "operator": "timeLessThanOrEquals",
     *       "value": "17:00:00+00:00"
     *     }]
     *   }
     * ``` You can use the following operators in the **`key`**, **`value`** pair:
     * ```
     *   'timeLessThan', 'timeLessThanOrEquals', 'timeGreaterThan', 'timeGreaterThanOrEquals',
     *   'dateTimeLessThan', 'dateTimeLessThanOrEquals', 'dateTimeGreaterThan', 'dateTimeGreaterThanOrEquals',
     *   'dayOfWeekEquals', 'dayOfWeekAnyOf',
     * ``` The pattern field that matches the rule is required when rule is provided. For the business hour rule example
     * above, the **`pattern`** is **`"time-based-conditions:weekly"`**. For more information, see [Time-based conditions
     * operators](https://cloud.ibm.com/docs/account?topic=account-iam-condition-properties&interface=ui#policy-condition-properties)
     * and
     * [Limiting access with time-based
     * conditions](https://cloud.ibm.com/docs/account?topic=account-iam-time-based&interface=ui).
     *
     * ### Authorization
     *
     * To update an authorization policy, use **`"type": "authorization"`** in the body. The subject attributes must match
     * the supported authorization subjects of the resource. Multiple subject attributes might be provided. The following
     * attributes are supported:
     *   serviceName, serviceInstance, region, resourceType, resource, accountId, resourceGroupId Assign roles that are
     * supported by the service or platform roles. For more information, see [IAM roles and
     * actions](/docs/account?topic=account-iam-service-roles-actions). The user must also have the same level of access
     * or greater to the target resource in order to grant the role. Use only the resource attributes supported by the
     * service. To view a service's or the platform's supported attributes, check the [documentation](/docs?tab=all-docs).
     * Both the policy subject and the policy resource must include the **`accountId`** attributes. The policy subject
     * must include either **`serviceName`** or **`resourceGroupId`** (or both) attributes.
     *
     * ### Attribute Operators
     *
     * Currently, only the `stringEquals`, `stringMatch`, and `stringEquals` operators are available. For more
     * information, see [Assigning access by using wildcard
     * policies](https://cloud.ibm.com/docs/account?topic=account-wildcard).
     *
     * ### Attribute Validations
     *
     * Policy attribute values must be between 1 and 1,000 characters in length. If location related attributes like
     * geography, country, metro, region, satellite, and locationvalues are supported by the service, they are validated
     * against Global Catalog locations.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The policy ID.
     * @param {string} params.ifMatch - The revision number for updating a policy and must match the ETag value of the
     * existing policy. The Etag can be retrieved using the GET /v2/policies/{id} API and looking at the ETag response
     * header.
     * @param {Control} params.control - Specifies the type of access granted by the policy.
     * @param {string} params.type - The policy type; either 'access' or 'authorization'.
     * @param {string} [params.description] - Description of the policy.
     * @param {V2PolicySubject} [params.subject] - The subject attributes for whom the policy grants access.
     * @param {V2PolicyResource} [params.resource] - The resource attributes to which the policy grants access.
     * @param {string} [params.pattern] - Indicates pattern of rule, either 'time-based-conditions:once',
     * 'time-based-conditions:weekly:all-day', or 'time-based-conditions:weekly:custom-hours'.
     * @param {V2PolicyRule} [params.rule] - Additional access conditions associated with the policy.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.V2Policy>>}
     */
    IamPolicyManagementV1.prototype.replaceV2Policy = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['id', 'ifMatch', 'control', 'type'];
        var _validParams = [
            'id',
            'ifMatch',
            'control',
            'type',
            'description',
            'subject',
            'resource',
            'pattern',
            'rule',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'control': _params.control,
            'type': _params.type,
            'description': _params.description,
            'subject': _params.subject,
            'resource': _params.resource,
            'pattern': _params.pattern,
            'rule': _params.rule,
        };
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'replaceV2Policy');
        var parameters = {
            options: {
                url: '/v2/policies/{id}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Retrieve a policy by ID.
     *
     * Retrieve a policy by providing a policy ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The policy ID.
     * @param {string} [params.format] - Include additional data for policy returned
     * * `include_last_permit` - returns details of when the policy last granted a permit decision and the number of times
     * it has done so
     * * `display` - returns the list of all actions included in each of the policy roles and translations for all
     * relevant fields.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.V2PolicyTemplateMetaData>>}
     */
    IamPolicyManagementV1.prototype.getV2Policy = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['id'];
        var _validParams = ['id', 'format', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'format': _params.format,
        };
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getV2Policy');
        var parameters = {
            options: {
                url: '/v2/policies/{id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a policy by ID.
     *
     * Delete a policy by providing a policy ID. A policy cannot be deleted if the subject ID contains a locked service
     * ID. If the subject of the policy is a locked service-id, the request will fail.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The policy ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.EmptyObject>>}
     */
    IamPolicyManagementV1.prototype.deleteV2Policy = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['id'];
        var _validParams = ['id', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteV2Policy');
        var parameters = {
            options: {
                url: '/v2/policies/{id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * policyTemplates
     ************************/
    /**
     * List policy templates by attributes.
     *
     * List policy templates and filter by attributes by using query parameters. The following attributes are supported:
     * `account_id`.
     * `account_id` is a required query parameter. Only policy templates that have the specified attributes and that the
     * caller has read access to are returned. If the caller does not have read access to any policy templates an empty
     * array is returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - The account GUID that the policy templates belong to.
     * @param {string} [params.acceptLanguage] - Language code for translations
     * * `default` - English
     * * `de` -  German (Standard)
     * * `en` - English
     * * `es` - Spanish (Spain)
     * * `fr` - French (Standard)
     * * `it` - Italian (Standard)
     * * `ja` - Japanese
     * * `ko` - Korean
     * * `pt-br` - Portuguese (Brazil)
     * * `zh-cn` - Chinese (Simplified, PRC)
     * * `zh-tw` - (Chinese, Taiwan).
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.PolicyTemplateCollection>>}
     */
    IamPolicyManagementV1.prototype.listPolicyTemplates = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['accountId'];
        var _validParams = ['accountId', 'acceptLanguage', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'account_id': _params.accountId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'listPolicyTemplates');
        var parameters = {
            options: {
                url: '/v1/policy_templates',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Accept-Language': _params.acceptLanguage,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create a policy template.
     *
     * Create a policy template. Policy templates define a policy without requiring a subject, and you can use them to
     * grant access to multiple subjects.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.name - Required field when creating a new template. Otherwise this field is optional. If the
     * field is included it will change the name value for all existing versions of the template.
     * @param {string} params.accountId - Enterprise account ID where this template will be created.
     * @param {TemplatePolicy} params.policy - The core set of properties associated with the template's policy objet.
     * @param {string} [params.description] - Description of the policy template. This is shown to users in the enterprise
     * account. Use this to describe the purpose or context of the policy for enterprise users managing IAM templates.
     * @param {boolean} [params.committed] - Committed status of the template.
     * @param {string} [params.acceptLanguage] - Language code for translations
     * * `default` - English
     * * `de` -  German (Standard)
     * * `en` - English
     * * `es` - Spanish (Spain)
     * * `fr` - French (Standard)
     * * `it` - Italian (Standard)
     * * `ja` - Japanese
     * * `ko` - Korean
     * * `pt-br` - Portuguese (Brazil)
     * * `zh-cn` - Chinese (Simplified, PRC)
     * * `zh-tw` - (Chinese, Taiwan).
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.PolicyTemplateLimitData>>}
     */
    IamPolicyManagementV1.prototype.createPolicyTemplate = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['name', 'accountId', 'policy'];
        var _validParams = [
            'name',
            'accountId',
            'policy',
            'description',
            'committed',
            'acceptLanguage',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'name': _params.name,
            'account_id': _params.accountId,
            'policy': _params.policy,
            'description': _params.description,
            'committed': _params.committed,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'createPolicyTemplate');
        var parameters = {
            options: {
                url: '/v1/policy_templates',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Accept-Language': _params.acceptLanguage,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Retrieve latest version of a policy template.
     *
     * Retrieve the latest version of a policy template by providing a policy template ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.policyTemplateId - The policy template ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.PolicyTemplate>>}
     */
    IamPolicyManagementV1.prototype.getPolicyTemplate = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['policyTemplateId'];
        var _validParams = ['policyTemplateId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'policy_template_id': _params.policyTemplateId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getPolicyTemplate');
        var parameters = {
            options: {
                url: '/v1/policy_templates/{policy_template_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a policy template.
     *
     * Delete a policy template by providing the policy template ID. This deletes all versions of this template. A policy
     * template can't be deleted if any version of the template is assigned to one or more child accounts. You must remove
     * the policy assignments first.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.policyTemplateId - The policy template ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.EmptyObject>>}
     */
    IamPolicyManagementV1.prototype.deletePolicyTemplate = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['policyTemplateId'];
        var _validParams = ['policyTemplateId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'policy_template_id': _params.policyTemplateId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'deletePolicyTemplate');
        var parameters = {
            options: {
                url: '/v1/policy_templates/{policy_template_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create a new policy template version.
     *
     * Create a new version of a policy template. Use this if you need to make updates to a policy template that is
     * committed.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.policyTemplateId - The policy template ID.
     * @param {TemplatePolicy} params.policy - The core set of properties associated with the template's policy objet.
     * @param {string} [params.name] - Required field when creating a new template. Otherwise this field is optional. If
     * the field is included it will change the name value for all existing versions of the template.
     * @param {string} [params.description] - Description of the policy template. This is shown to users in the enterprise
     * account. Use this to describe the purpose or context of the policy for enterprise users managing IAM templates.
     * @param {boolean} [params.committed] - Committed status of the template version.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.PolicyTemplateLimitData>>}
     */
    IamPolicyManagementV1.prototype.createPolicyTemplateVersion = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['policyTemplateId', 'policy'];
        var _validParams = [
            'policyTemplateId',
            'policy',
            'name',
            'description',
            'committed',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'policy': _params.policy,
            'name': _params.name,
            'description': _params.description,
            'committed': _params.committed,
        };
        var path = {
            'policy_template_id': _params.policyTemplateId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'createPolicyTemplateVersion');
        var parameters = {
            options: {
                url: '/v1/policy_templates/{policy_template_id}/versions',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Retrieve policy template versions.
     *
     * Retrieve the versions of a policy template by providing a policy template ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.policyTemplateId - The policy template ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.PolicyTemplateVersionsCollection>>}
     */
    IamPolicyManagementV1.prototype.listPolicyTemplateVersions = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['policyTemplateId'];
        var _validParams = ['policyTemplateId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'policy_template_id': _params.policyTemplateId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'listPolicyTemplateVersions');
        var parameters = {
            options: {
                url: '/v1/policy_templates/{policy_template_id}/versions',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update a policy template version.
     *
     * Update a specific version of a policy template. You can use this only if the version isn't committed.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.policyTemplateId - The policy template ID.
     * @param {string} params.version - The policy template version.
     * @param {string} params.ifMatch - The revision number for updating a policy template version and must match the ETag
     * value of the existing policy template version. The Etag can be retrieved using the GET
     * /v1/policy_templates/{policy_template_id}/versions/{version} API and looking at the ETag response header.
     * @param {TemplatePolicy} params.policy - The core set of properties associated with the template's policy objet.
     * @param {string} [params.name] - Required field when creating a new template. Otherwise this field is optional. If
     * the field is included it will change the name value for all existing versions of the template.
     * @param {string} [params.description] - Description of the policy template. This is shown to users in the enterprise
     * account. Use this to describe the purpose or context of the policy for enterprise users managing IAM templates.
     * @param {boolean} [params.committed] - Committed status of the template version.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.PolicyTemplate>>}
     */
    IamPolicyManagementV1.prototype.replacePolicyTemplate = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['policyTemplateId', 'version', 'ifMatch', 'policy'];
        var _validParams = [
            'policyTemplateId',
            'version',
            'ifMatch',
            'policy',
            'name',
            'description',
            'committed',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'policy': _params.policy,
            'name': _params.name,
            'description': _params.description,
            'committed': _params.committed,
        };
        var path = {
            'policy_template_id': _params.policyTemplateId,
            'version': _params.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'replacePolicyTemplate');
        var parameters = {
            options: {
                url: '/v1/policy_templates/{policy_template_id}/versions/{version}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a policy template version.
     *
     * Delete a specific version of a policy template by providing a policy template ID and version number. You can't
     * delete a policy template version that is assigned to one or more child accounts. You must remove the policy
     * assignments first.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.policyTemplateId - The policy template ID.
     * @param {string} params.version - The policy template version.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.EmptyObject>>}
     */
    IamPolicyManagementV1.prototype.deletePolicyTemplateVersion = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['policyTemplateId', 'version'];
        var _validParams = ['policyTemplateId', 'version', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'policy_template_id': _params.policyTemplateId,
            'version': _params.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'deletePolicyTemplateVersion');
        var parameters = {
            options: {
                url: '/v1/policy_templates/{policy_template_id}/versions/{version}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Retrieve a policy template version.
     *
     * Retrieve a policy template by providing a policy template ID and version number.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.policyTemplateId - The policy template ID.
     * @param {string} params.version - The policy template version.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.PolicyTemplate>>}
     */
    IamPolicyManagementV1.prototype.getPolicyTemplateVersion = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['policyTemplateId', 'version'];
        var _validParams = ['policyTemplateId', 'version', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'policy_template_id': _params.policyTemplateId,
            'version': _params.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getPolicyTemplateVersion');
        var parameters = {
            options: {
                url: '/v1/policy_templates/{policy_template_id}/versions/{version}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Commit a policy template version.
     *
     * Commit a policy template version. You can make no further changes to the policy template once it's committed. If
     * you need to make updates after committing a version, create a new version.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.policyTemplateId - The policy template ID.
     * @param {string} params.version - The policy template version.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.EmptyObject>>}
     */
    IamPolicyManagementV1.prototype.commitPolicyTemplate = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['policyTemplateId', 'version'];
        var _validParams = ['policyTemplateId', 'version', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'policy_template_id': _params.policyTemplateId,
            'version': _params.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'commitPolicyTemplate');
        var parameters = {
            options: {
                url: '/v1/policy_templates/{policy_template_id}/versions/{version}/commit',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * policyAssignments
     ************************/
    /**
     * Get policy template assignments.
     *
     * Get policy template assignments by attributes. The following attributes are supported:
     * `account_id`, `template_id`, `template_version`, `sort`.
     * `account_id` is a required query parameter. Only policy template assignments that have the specified attributes and
     * that the caller has read access to are returned. If the caller does not have read access to any policy template
     * assignments an empty array is returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - The account GUID in which the policies belong to.
     * @param {string} [params.acceptLanguage] - Language code for translations
     * * `default` - English
     * * `de` -  German (Standard)
     * * `en` - English
     * * `es` - Spanish (Spain)
     * * `fr` - French (Standard)
     * * `it` - Italian (Standard)
     * * `ja` - Japanese
     * * `ko` - Korean
     * * `pt-br` - Portuguese (Brazil)
     * * `zh-cn` - Chinese (Simplified, PRC)
     * * `zh-tw` - (Chinese, Taiwan).
     * @param {string} [params.templateId] - Optional template id.
     * @param {string} [params.templateVersion] - Optional policy template version.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.PolicyTemplateAssignmentCollection>>}
     */
    IamPolicyManagementV1.prototype.listPolicyAssignments = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['accountId'];
        var _validParams = [
            'accountId',
            'acceptLanguage',
            'templateId',
            'templateVersion',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'account_id': _params.accountId,
            'template_id': _params.templateId,
            'template_version': _params.templateVersion,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'listPolicyAssignments');
        var parameters = {
            options: {
                url: '/v1/policy_assignments',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Accept-Language': _params.acceptLanguage,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Retrieve a policy assignment.
     *
     * Retrieve a policy template assignment by providing a policy assignment ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assignmentId - The policy template assignment ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.PolicyAssignment>>}
     */
    IamPolicyManagementV1.prototype.getPolicyAssignment = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['assignmentId'];
        var _validParams = ['assignmentId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'assignment_id': _params.assignmentId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(IamPolicyManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getPolicyAssignment');
        var parameters = {
            options: {
                url: '/v1/policy_assignments/{assignment_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    IamPolicyManagementV1.DEFAULT_SERVICE_URL = 'https://iam.cloud.ibm.com';
    IamPolicyManagementV1.DEFAULT_SERVICE_NAME = 'iam_policy_management';
    return IamPolicyManagementV1;
}(ibm_cloud_sdk_core_1.BaseService));
/*************************
 * interfaces
 ************************/
(function (IamPolicyManagementV1) {
    /** Constants for the `listPolicies` operation. */
    var ListPoliciesConstants;
    (function (ListPoliciesConstants) {
        /** Optional type of policy. */
        var Type;
        (function (Type) {
            Type["ACCESS"] = "access";
            Type["AUTHORIZATION"] = "authorization";
        })(Type = ListPoliciesConstants.Type || (ListPoliciesConstants.Type = {}));
        /** Optional type of service. */
        var ServiceType;
        (function (ServiceType) {
            ServiceType["SERVICE"] = "service";
            ServiceType["PLATFORM_SERVICE"] = "platform_service";
        })(ServiceType = ListPoliciesConstants.ServiceType || (ListPoliciesConstants.ServiceType = {}));
        /** Optional top level policy field to sort results. Ascending sort is default. Descending sort available by prepending '-' to field. Example '-last_modified_at'. */
        var Sort;
        (function (Sort) {
            Sort["ID"] = "id";
            Sort["TYPE"] = "type";
            Sort["HREF"] = "href";
            Sort["CREATED_AT"] = "created_at";
            Sort["CREATED_BY_ID"] = "created_by_id";
            Sort["LAST_MODIFIED_AT"] = "last_modified_at";
            Sort["LAST_MODIFIED_BY_ID"] = "last_modified_by_id";
            Sort["STATE"] = "state";
        })(Sort = ListPoliciesConstants.Sort || (ListPoliciesConstants.Sort = {}));
        /** Include additional data per policy returned * `include_last_permit` - returns details of when the policy last granted a permit decision and the number of times it has done so * `display` - returns the list of all actions included in each of the policy roles. */
        var Format;
        (function (Format) {
            Format["INCLUDE_LAST_PERMIT"] = "include_last_permit";
            Format["DISPLAY"] = "display";
        })(Format = ListPoliciesConstants.Format || (ListPoliciesConstants.Format = {}));
        /** The state of the policy. * `active` - returns active policies * `deleted` - returns non-active policies. */
        var State;
        (function (State) {
            State["ACTIVE"] = "active";
            State["DELETED"] = "deleted";
        })(State = ListPoliciesConstants.State || (ListPoliciesConstants.State = {}));
    })(ListPoliciesConstants = IamPolicyManagementV1.ListPoliciesConstants || (IamPolicyManagementV1.ListPoliciesConstants = {}));
    /** Constants for the `updatePolicyState` operation. */
    var UpdatePolicyStateConstants;
    (function (UpdatePolicyStateConstants) {
        /** The policy state. */
        var State;
        (function (State) {
            State["ACTIVE"] = "active";
            State["DELETED"] = "deleted";
        })(State = UpdatePolicyStateConstants.State || (UpdatePolicyStateConstants.State = {}));
    })(UpdatePolicyStateConstants = IamPolicyManagementV1.UpdatePolicyStateConstants || (IamPolicyManagementV1.UpdatePolicyStateConstants = {}));
    /** Constants for the `listV2Policies` operation. */
    var ListV2PoliciesConstants;
    (function (ListV2PoliciesConstants) {
        /** Optional type of policy. */
        var Type;
        (function (Type) {
            Type["ACCESS"] = "access";
            Type["AUTHORIZATION"] = "authorization";
        })(Type = ListV2PoliciesConstants.Type || (ListV2PoliciesConstants.Type = {}));
        /** Optional type of service. */
        var ServiceType;
        (function (ServiceType) {
            ServiceType["SERVICE"] = "service";
            ServiceType["PLATFORM_SERVICE"] = "platform_service";
        })(ServiceType = ListV2PoliciesConstants.ServiceType || (ListV2PoliciesConstants.ServiceType = {}));
        /** Include additional data per policy returned * `include_last_permit` - returns details of when the policy last granted a permit decision and the number of times it has done so * `display` - returns the list of all actions included in each of the policy roles and translations for all relevant fields. */
        var Format;
        (function (Format) {
            Format["INCLUDE_LAST_PERMIT"] = "include_last_permit";
            Format["DISPLAY"] = "display";
        })(Format = ListV2PoliciesConstants.Format || (ListV2PoliciesConstants.Format = {}));
        /** The state of the policy. * `active` - returns active policies * `deleted` - returns non-active policies. */
        var State;
        (function (State) {
            State["ACTIVE"] = "active";
            State["DELETED"] = "deleted";
        })(State = ListV2PoliciesConstants.State || (ListV2PoliciesConstants.State = {}));
    })(ListV2PoliciesConstants = IamPolicyManagementV1.ListV2PoliciesConstants || (IamPolicyManagementV1.ListV2PoliciesConstants = {}));
    /** Constants for the `createV2Policy` operation. */
    var CreateV2PolicyConstants;
    (function (CreateV2PolicyConstants) {
        /** The policy type; either 'access' or 'authorization'. */
        var Type;
        (function (Type) {
            Type["ACCESS"] = "access";
            Type["AUTHORIZATION"] = "authorization";
        })(Type = CreateV2PolicyConstants.Type || (CreateV2PolicyConstants.Type = {}));
    })(CreateV2PolicyConstants = IamPolicyManagementV1.CreateV2PolicyConstants || (IamPolicyManagementV1.CreateV2PolicyConstants = {}));
    /** Constants for the `replaceV2Policy` operation. */
    var ReplaceV2PolicyConstants;
    (function (ReplaceV2PolicyConstants) {
        /** The policy type; either 'access' or 'authorization'. */
        var Type;
        (function (Type) {
            Type["ACCESS"] = "access";
            Type["AUTHORIZATION"] = "authorization";
        })(Type = ReplaceV2PolicyConstants.Type || (ReplaceV2PolicyConstants.Type = {}));
    })(ReplaceV2PolicyConstants = IamPolicyManagementV1.ReplaceV2PolicyConstants || (IamPolicyManagementV1.ReplaceV2PolicyConstants = {}));
    /** Constants for the `getV2Policy` operation. */
    var GetV2PolicyConstants;
    (function (GetV2PolicyConstants) {
        /** Include additional data for policy returned * `include_last_permit` - returns details of when the policy last granted a permit decision and the number of times it has done so * `display` - returns the list of all actions included in each of the policy roles and translations for all relevant fields. */
        var Format;
        (function (Format) {
            Format["INCLUDE_LAST_PERMIT"] = "include_last_permit";
            Format["DISPLAY"] = "display";
        })(Format = GetV2PolicyConstants.Format || (GetV2PolicyConstants.Format = {}));
    })(GetV2PolicyConstants = IamPolicyManagementV1.GetV2PolicyConstants || (IamPolicyManagementV1.GetV2PolicyConstants = {}));
    var ErrorObject;
    (function (ErrorObject) {
        var Constants;
        (function (Constants) {
            /** The API error code for the error. */
            var Code;
            (function (Code) {
                Code["INSUFFICENT_PERMISSIONS"] = "insufficent_permissions";
                Code["INVALID_BODY"] = "invalid_body";
                Code["INVALID_TOKEN"] = "invalid_token";
                Code["MISSING_REQUIRED_QUERY_PARAMETER"] = "missing_required_query_parameter";
                Code["NOT_FOUND"] = "not_found";
                Code["POLICY_CONFLICT_ERROR"] = "policy_conflict_error";
                Code["POLICY_NOT_FOUND"] = "policy_not_found";
                Code["REQUEST_NOT_PROCESSED"] = "request_not_processed";
                Code["ROLE_CONFLICT_ERROR"] = "role_conflict_error";
                Code["ROLE_NOT_FOUND"] = "role_not_found";
                Code["TOO_MANY_REQUESTS"] = "too_many_requests";
                Code["UNABLE_TO_PROCESS"] = "unable_to_process";
                Code["UNSUPPORTED_CONTENT_TYPE"] = "unsupported_content_type";
                Code["POLICY_TEMPLATE_CONFLICT_ERROR"] = "policy_template_conflict_error";
                Code["POLICY_TEMPLATE_NOT_FOUND"] = "policy_template_not_found";
                Code["POLICY_ASSIGNMENT_NOT_FOUND"] = "policy_assignment_not_found";
                Code["POLICY_ASSIGNMENT_CONFLICT_ERROR"] = "policy_assignment_conflict_error";
            })(Code = Constants.Code || (Constants.Code = {}));
        })(Constants = ErrorObject.Constants || (ErrorObject.Constants = {}));
    })(ErrorObject = IamPolicyManagementV1.ErrorObject || (IamPolicyManagementV1.ErrorObject = {}));
    var Policy;
    (function (Policy) {
        var Constants;
        (function (Constants) {
            /** The policy state. */
            var State;
            (function (State) {
                State["ACTIVE"] = "active";
                State["DELETED"] = "deleted";
            })(State = Constants.State || (Constants.State = {}));
        })(Constants = Policy.Constants || (Policy.Constants = {}));
    })(Policy = IamPolicyManagementV1.Policy || (IamPolicyManagementV1.Policy = {}));
    var PolicyAssignment;
    (function (PolicyAssignment) {
        var Constants;
        (function (Constants) {
            /** Assignment target type. */
            var TargetType;
            (function (TargetType) {
                TargetType["ACCOUNT"] = "Account";
            })(TargetType = Constants.TargetType || (Constants.TargetType = {}));
            /** The policy assignment status. */
            var Status;
            (function (Status) {
                Status["IN_PROGRESS"] = "in_progress";
                Status["SUCCEEDED"] = "succeeded";
                Status["SUCCEED_WITH_ERRORS"] = "succeed_with_errors";
                Status["FAILED"] = "failed";
            })(Status = Constants.Status || (Constants.Status = {}));
        })(Constants = PolicyAssignment.Constants || (PolicyAssignment.Constants = {}));
    })(PolicyAssignment = IamPolicyManagementV1.PolicyAssignment || (IamPolicyManagementV1.PolicyAssignment = {}));
    var PolicyAssignmentOptions;
    (function (PolicyAssignmentOptions) {
        var Constants;
        (function (Constants) {
            /** The policy subject type; either 'iam_id' or 'access_group_id'. */
            var SubjectType;
            (function (SubjectType) {
                SubjectType["IAM_ID"] = "iam_id";
                SubjectType["ACCESS_GROUP_ID"] = "access_group_id";
            })(SubjectType = Constants.SubjectType || (Constants.SubjectType = {}));
        })(Constants = PolicyAssignmentOptions.Constants || (PolicyAssignmentOptions.Constants = {}));
    })(PolicyAssignmentOptions = IamPolicyManagementV1.PolicyAssignmentOptions || (IamPolicyManagementV1.PolicyAssignmentOptions = {}));
    var PolicyTemplateMetaData;
    (function (PolicyTemplateMetaData) {
        var Constants;
        (function (Constants) {
            /** The policy state. */
            var State;
            (function (State) {
                State["ACTIVE"] = "active";
                State["DELETED"] = "deleted";
            })(State = Constants.State || (Constants.State = {}));
        })(Constants = PolicyTemplateMetaData.Constants || (PolicyTemplateMetaData.Constants = {}));
    })(PolicyTemplateMetaData = IamPolicyManagementV1.PolicyTemplateMetaData || (IamPolicyManagementV1.PolicyTemplateMetaData = {}));
    var RuleAttribute;
    (function (RuleAttribute) {
        var Constants;
        (function (Constants) {
            /** The operator of an attribute. */
            var Operator;
            (function (Operator) {
                Operator["TIMELESSTHAN"] = "timeLessThan";
                Operator["TIMELESSTHANOREQUALS"] = "timeLessThanOrEquals";
                Operator["TIMEGREATERTHAN"] = "timeGreaterThan";
                Operator["TIMEGREATERTHANOREQUALS"] = "timeGreaterThanOrEquals";
                Operator["DATETIMELESSTHAN"] = "dateTimeLessThan";
                Operator["DATETIMELESSTHANOREQUALS"] = "dateTimeLessThanOrEquals";
                Operator["DATETIMEGREATERTHAN"] = "dateTimeGreaterThan";
                Operator["DATETIMEGREATERTHANOREQUALS"] = "dateTimeGreaterThanOrEquals";
                Operator["DAYOFWEEKEQUALS"] = "dayOfWeekEquals";
                Operator["DAYOFWEEKANYOF"] = "dayOfWeekAnyOf";
            })(Operator = Constants.Operator || (Constants.Operator = {}));
        })(Constants = RuleAttribute.Constants || (RuleAttribute.Constants = {}));
    })(RuleAttribute = IamPolicyManagementV1.RuleAttribute || (IamPolicyManagementV1.RuleAttribute = {}));
    var TemplatePolicy;
    (function (TemplatePolicy) {
        var Constants;
        (function (Constants) {
            /** The policy type; either 'access' or 'authorization'. */
            var Type;
            (function (Type) {
                Type["ACCESS"] = "access";
                Type["AUTHORIZATION"] = "authorization";
            })(Type = Constants.Type || (Constants.Type = {}));
        })(Constants = TemplatePolicy.Constants || (TemplatePolicy.Constants = {}));
    })(TemplatePolicy = IamPolicyManagementV1.TemplatePolicy || (IamPolicyManagementV1.TemplatePolicy = {}));
    var V2Policy;
    (function (V2Policy) {
        var Constants;
        (function (Constants) {
            /** The policy type; either 'access' or 'authorization'. */
            var Type;
            (function (Type) {
                Type["ACCESS"] = "access";
                Type["AUTHORIZATION"] = "authorization";
            })(Type = Constants.Type || (Constants.Type = {}));
            /** The policy state, either 'deleted' or 'active'. */
            var State;
            (function (State) {
                State["ACTIVE"] = "active";
                State["DELETED"] = "deleted";
            })(State = Constants.State || (Constants.State = {}));
        })(Constants = V2Policy.Constants || (V2Policy.Constants = {}));
    })(V2Policy = IamPolicyManagementV1.V2Policy || (IamPolicyManagementV1.V2Policy = {}));
    var V2PolicyResourceAttribute;
    (function (V2PolicyResourceAttribute) {
        var Constants;
        (function (Constants) {
            /** The operator of an attribute. */
            var Operator;
            (function (Operator) {
                Operator["STRINGEQUALS"] = "stringEquals";
                Operator["STRINGEXISTS"] = "stringExists";
                Operator["STRINGMATCH"] = "stringMatch";
            })(Operator = Constants.Operator || (Constants.Operator = {}));
        })(Constants = V2PolicyResourceAttribute.Constants || (V2PolicyResourceAttribute.Constants = {}));
    })(V2PolicyResourceAttribute = IamPolicyManagementV1.V2PolicyResourceAttribute || (IamPolicyManagementV1.V2PolicyResourceAttribute = {}));
    var V2PolicyResourceTag;
    (function (V2PolicyResourceTag) {
        var Constants;
        (function (Constants) {
            /** The operator of an access management tag. */
            var Operator;
            (function (Operator) {
                Operator["STRINGEQUALS"] = "stringEquals";
                Operator["STRINGMATCH"] = "stringMatch";
            })(Operator = Constants.Operator || (Constants.Operator = {}));
        })(Constants = V2PolicyResourceTag.Constants || (V2PolicyResourceTag.Constants = {}));
    })(V2PolicyResourceTag = IamPolicyManagementV1.V2PolicyResourceTag || (IamPolicyManagementV1.V2PolicyResourceTag = {}));
    var V2PolicySubjectAttribute;
    (function (V2PolicySubjectAttribute) {
        var Constants;
        (function (Constants) {
            /** The operator of an attribute. */
            var Operator;
            (function (Operator) {
                Operator["STRINGEQUALS"] = "stringEquals";
            })(Operator = Constants.Operator || (Constants.Operator = {}));
        })(Constants = V2PolicySubjectAttribute.Constants || (V2PolicySubjectAttribute.Constants = {}));
    })(V2PolicySubjectAttribute = IamPolicyManagementV1.V2PolicySubjectAttribute || (IamPolicyManagementV1.V2PolicySubjectAttribute = {}));
    var V2PolicyTemplateMetaData;
    (function (V2PolicyTemplateMetaData) {
        var Constants;
        (function (Constants) {
            /** The policy type; either 'access' or 'authorization'. */
            var Type;
            (function (Type) {
                Type["ACCESS"] = "access";
                Type["AUTHORIZATION"] = "authorization";
            })(Type = Constants.Type || (Constants.Type = {}));
            /** The policy state, either 'deleted' or 'active'. */
            var State;
            (function (State) {
                State["ACTIVE"] = "active";
                State["DELETED"] = "deleted";
            })(State = Constants.State || (Constants.State = {}));
        })(Constants = V2PolicyTemplateMetaData.Constants || (V2PolicyTemplateMetaData.Constants = {}));
    })(V2PolicyTemplateMetaData = IamPolicyManagementV1.V2PolicyTemplateMetaData || (IamPolicyManagementV1.V2PolicyTemplateMetaData = {}));
    var NestedConditionRuleAttribute;
    (function (NestedConditionRuleAttribute) {
        var Constants;
        (function (Constants) {
            /** The operator of an attribute. */
            var Operator;
            (function (Operator) {
                Operator["TIMELESSTHAN"] = "timeLessThan";
                Operator["TIMELESSTHANOREQUALS"] = "timeLessThanOrEquals";
                Operator["TIMEGREATERTHAN"] = "timeGreaterThan";
                Operator["TIMEGREATERTHANOREQUALS"] = "timeGreaterThanOrEquals";
                Operator["DATETIMELESSTHAN"] = "dateTimeLessThan";
                Operator["DATETIMELESSTHANOREQUALS"] = "dateTimeLessThanOrEquals";
                Operator["DATETIMEGREATERTHAN"] = "dateTimeGreaterThan";
                Operator["DATETIMEGREATERTHANOREQUALS"] = "dateTimeGreaterThanOrEquals";
                Operator["DAYOFWEEKEQUALS"] = "dayOfWeekEquals";
                Operator["DAYOFWEEKANYOF"] = "dayOfWeekAnyOf";
            })(Operator = Constants.Operator || (Constants.Operator = {}));
        })(Constants = NestedConditionRuleAttribute.Constants || (NestedConditionRuleAttribute.Constants = {}));
    })(NestedConditionRuleAttribute = IamPolicyManagementV1.NestedConditionRuleAttribute || (IamPolicyManagementV1.NestedConditionRuleAttribute = {}));
    var NestedConditionRuleWithConditions;
    (function (NestedConditionRuleWithConditions) {
        var Constants;
        (function (Constants) {
            /** Operator to evaluate conditions. */
            var Operator;
            (function (Operator) {
                Operator["AND"] = "and";
                Operator["OR"] = "or";
            })(Operator = Constants.Operator || (Constants.Operator = {}));
        })(Constants = NestedConditionRuleWithConditions.Constants || (NestedConditionRuleWithConditions.Constants = {}));
    })(NestedConditionRuleWithConditions = IamPolicyManagementV1.NestedConditionRuleWithConditions || (IamPolicyManagementV1.NestedConditionRuleWithConditions = {}));
    var V2PolicyRuleRuleAttribute;
    (function (V2PolicyRuleRuleAttribute) {
        var Constants;
        (function (Constants) {
            /** The operator of an attribute. */
            var Operator;
            (function (Operator) {
                Operator["TIMELESSTHAN"] = "timeLessThan";
                Operator["TIMELESSTHANOREQUALS"] = "timeLessThanOrEquals";
                Operator["TIMEGREATERTHAN"] = "timeGreaterThan";
                Operator["TIMEGREATERTHANOREQUALS"] = "timeGreaterThanOrEquals";
                Operator["DATETIMELESSTHAN"] = "dateTimeLessThan";
                Operator["DATETIMELESSTHANOREQUALS"] = "dateTimeLessThanOrEquals";
                Operator["DATETIMEGREATERTHAN"] = "dateTimeGreaterThan";
                Operator["DATETIMEGREATERTHANOREQUALS"] = "dateTimeGreaterThanOrEquals";
                Operator["DAYOFWEEKEQUALS"] = "dayOfWeekEquals";
                Operator["DAYOFWEEKANYOF"] = "dayOfWeekAnyOf";
            })(Operator = Constants.Operator || (Constants.Operator = {}));
        })(Constants = V2PolicyRuleRuleAttribute.Constants || (V2PolicyRuleRuleAttribute.Constants = {}));
    })(V2PolicyRuleRuleAttribute = IamPolicyManagementV1.V2PolicyRuleRuleAttribute || (IamPolicyManagementV1.V2PolicyRuleRuleAttribute = {}));
    var V2PolicyRuleRuleWithNestedConditions;
    (function (V2PolicyRuleRuleWithNestedConditions) {
        var Constants;
        (function (Constants) {
            /** Operator to evaluate conditions. */
            var Operator;
            (function (Operator) {
                Operator["AND"] = "and";
                Operator["OR"] = "or";
            })(Operator = Constants.Operator || (Constants.Operator = {}));
        })(Constants = V2PolicyRuleRuleWithNestedConditions.Constants || (V2PolicyRuleRuleWithNestedConditions.Constants = {}));
    })(V2PolicyRuleRuleWithNestedConditions = IamPolicyManagementV1.V2PolicyRuleRuleWithNestedConditions || (IamPolicyManagementV1.V2PolicyRuleRuleWithNestedConditions = {}));
})(IamPolicyManagementV1 || (IamPolicyManagementV1 = {}));
module.exports = IamPolicyManagementV1;
//# sourceMappingURL=v1.js.map